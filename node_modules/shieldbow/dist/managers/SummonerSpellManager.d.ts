import type { Client } from '../client';
import type { BaseManager, FetchOptions } from '../types';
import { SummonerSpell } from '../structures';
import { Collection } from '@discordjs/collection';
/**
 * A spell manager - to fetch and manage all summoner spell data.
 */
export declare class SummonerSpellManager implements BaseManager<SummonerSpell> {
    /**
     * The client this summoner spell manager belongs to.
     */
    readonly client: Client;
    /**
     * Creates a new summoner spell manager.
     * @param client - The client this summoner spell manager belongs to.
     */
    constructor(client: Client);
    /**
     * Fetch all summoner spells.
     * @param options - The basic fetching options.
     */
    fetchAll(options?: FetchOptions): Promise<Collection<string, SummonerSpell>>;
    /**
     * Fetch a spell by its ID. The ID is usually something like Summoner\{Spell\}
     * For example, for the spell `Flash`, the ID is `SummonerFlash`.
     * But there are a lot of exceptions to this,
     * so it is recommended to use {@link SummonerSpellManager.fetchByName | fetchByName} instead.
     *
     * @param key - The ID of the spell to fetch.
     * @param options - The basic fetching options.
     */
    fetch(key: string, options?: FetchOptions): Promise<SummonerSpell>;
    /**
     * Fetch a spell by its name.
     * The search is case-insensitive.
     * The special characters are NOT ignored.
     *
     * @param name - The name of the spell to look for.
     * @param options - The basic fetching options.
     */
    fetchByName(name: string, options?: FetchOptions): Promise<SummonerSpell | undefined>;
    private _fetchLocalSpells;
}
//# sourceMappingURL=SummonerSpellManager.d.ts.map