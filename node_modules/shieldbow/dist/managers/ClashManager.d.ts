import type { Client } from '../client';
import type { BaseManager, FetchOptions } from '../types';
import { Tournament, TournamentPlayer, TournamentTeam } from '../structures';
/**
 * A clash manager - to fetch and store clash tournaments and related data.
 *
 * Requires API key with access to `clash-v1` API.
 */
export declare class ClashManager implements BaseManager<Tournament> {
    /**
     * The client this clash manager belongs to.
     */
    readonly client: Client;
    /**
     * Creates a new clash manager.
     * @param client - The client this clash manager belongs to.
     */
    constructor(client: Client);
    /**
     * Fetch a clash tournament by its ID.
     * @param id - The ID of the clash tournament.
     * @param options - The basic fetch options.
     */
    fetch(id: number, options?: FetchOptions): Promise<Tournament>;
    /**
     * Fetch all upcoming and active clash tournaments.
     *
     * @param options - The basic fetch options (always fetches from the API, skipping cache and storage).
     */
    fetchAll(options?: FetchOptions): Promise<Tournament[]>;
    /**
     * Fetch a clash tournament by participating team's ID.
     * @param teamId - The ID of the team.
     * @param options - The basic fetch options (always fetches from API, skipping cache and storage).
     */
    fetchByTeamId(teamId: string, options?: FetchOptions): Promise<Tournament>;
    /**
     * Fetch a team participating in a clash tournament by the team ID.
     * @param teamId - The ID of the team.
     * @param options - The basic fetch options.
     */
    fetchTeam(teamId: string, options?: FetchOptions): Promise<TournamentTeam>;
    /**
     * Fetch participation info of a summoner in clash tournaments by the summoner ID.
     * @param summonerId - The ID of the summoner.
     * @param options - The basic fetch options.
     */
    fetchPlayer(summonerId: string, options?: FetchOptions): Promise<TournamentPlayer[]>;
}
//# sourceMappingURL=ClashManager.d.ts.map