import type { BaseManager, FetchOptions } from '../types';
import type { Client } from '../client';
import { Account } from '../structures';
/**
 * An account manager - to fetch and manage all the RIOT accounts.
 *
 * Requires API key with access to `account-v1` API.
 */
export declare class AccountManager implements BaseManager<Account> {
    /**
     * The client this account manager belongs to.
     */
    readonly client: Client;
    /**
     * Creates a new account manager.
     * @param client - The client this account manager belongs to.
     */
    constructor(client: Client);
    /**
     * Fetch a RIOT account by its unique PUUID.
     *
     * @param id - The PUUID of the RIOT account.
     * @param options - The basic fetching options.
     */
    fetch(id: string, options?: FetchOptions): Promise<Account>;
    /**
     * Fetch a RIOT account by its name and tag.
     *
     * @param name - The name of this RIOT account.
     * @param tag - The tag of this RIOT account.
     * @param options - The basic fetching options.
     */
    fetchByNameAndTag(name: string, tag: string, options?: FetchOptions): Promise<Account>;
}
//# sourceMappingURL=AccountManager.d.ts.map