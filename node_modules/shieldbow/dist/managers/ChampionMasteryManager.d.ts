import type { BaseManager, FetchOptions } from '../types';
import type { Client } from '../client';
import { Collection } from '@discordjs/collection';
import { Champion, ChampionMastery, Summoner } from '../structures';
/**
 * A champion mastery manager - to fetch and manage all summoner's champion mastery data.
 *
 * Requires API key with access to `champion-mastery-v4` API.
 */
export declare class ChampionMasteryManager implements BaseManager<ChampionMastery> {
    /**
     * The client this champion mastery manager belongs to.
     */
    readonly client: Client;
    /**
     * The ID of the summoner whose mastery is managed by this manager.
     */
    readonly summoner: Summoner;
    /**
     * Creates a new champion mastery manager.
     *
     * @param client - The client this champion mastery manager belongs to.
     * @param summoner - The summoner this manager belongs to.
     */
    constructor(client: Client, summoner: Summoner);
    private _totalScore;
    /**
     * The total mastery score of this summoner.
     */
    get totalScore(): number;
    /**
     * Fetch a champion's mastery data for the summoner.
     *
     * @param champion - The champion (or its ID) whose mastery data needs to be fetched.
     * @param options - The basic fetching options.
     */
    fetch(champion: Champion | string, options?: FetchOptions): Promise<ChampionMastery>;
    /**
     * Get the nth highest champion mastery for the summoner.
     *
     * @param n - The ranking of the champion in the summoner's champions mastery, defaults to 0 (highest).
     * @param options - The basic fetching options.
     */
    highest(n?: number, options?: FetchOptions): Promise<ChampionMastery>;
    /**
     * Fetches the top n champions' mastery data for this summoner.
     * They are already sorted by mastery level.
     *
     * @param n - The number of champions to fetch, defaults to 3.
     * @param options - The basic fetching options.
     */
    fetchTop(n?: number, options?: FetchOptions): Promise<ChampionMastery[]>;
    /**
     * Fetches all the champions' masteries data for this summoner and store them in the cache.
     */
    fetchAll(options?: FetchOptions): Promise<Collection<string, ChampionMastery>>;
    /**
     * Get an updated total mastery score for this summoner.
     */
    updateTotalScore(): Promise<number>;
    /**
     * Fetch raw ChampionMasteryData[] response from API
     */
    private _fetchRawMasteryData;
    /**
     * Sort mastery by level and points
     * Works for raw and parsed masteries
     */
    private _sortMastery;
}
//# sourceMappingURL=ChampionMasteryManager.d.ts.map