import type { BaseManager, FetchOptions } from '../types';
import type { Client } from '../client';
import { Collection } from '@discordjs/collection';
import { Champion } from '../structures';
/**
 * A champion manager - to fetch and manage all the champion data.
 *
 * Does not require an API Key. (Except for {@link ChampionManager.fetchRotations}).
 */
export declare class ChampionManager implements BaseManager<Champion> {
    /**
     * The client that this champion manager belongs to.
     */
    readonly client: Client;
    /**
     * Create a new Champions Manager
     *
     * @param client - The client this champion manager belongs to.
     */
    constructor(client: Client);
    /**
     * Fetch all the champions and store it in the cache.
     *
     * This always fetches freshly from data dragon, community dragon and meraki analytics.
     *
     * @param options - The basic fetching options (only `cache` and `store` affect this method).
     */
    fetchAll(options?: FetchOptions): Promise<Collection<string, Champion>>;
    /**
     * Fetches a champion by the champion ID.
     * @param id - The {@link Champion.id | ID} of the champion whose data needs to be fetched.
     * @param options - The basic fetching options.
     */
    fetch(id: string, options?: FetchOptions): Promise<Champion>;
    /**
     * Fetch a champion by their name (instead of ID, which is very similar but not the same as the name).
     * The search is case-insensitive.
     * The special characters are NOT ignored.
     *
     * @param name - The name of the champions to fetch.
     * @param options - The basic fetching options.
     */
    fetchByName(name: string, options?: FetchOptions): Promise<Champion | undefined>;
    /**
     * Fetch and cache champion by their unique 3-digit keys.
     *
     * This is mostly for internal use while fetching match (or live match) data to improve performance.
     *
     * @param key - The key of the champions to fetch.
     * @param options - The basic fetching options.
     */
    fetchByKey(key: number, options?: FetchOptions): Promise<Champion | undefined>;
    /**
     * Fetch and cache champions by their names.
     *
     * @param names - The names of the champions to fetch.
     * @param options - The basic fetching options.
     */
    fetchByNames(names: string[], options?: FetchOptions): Promise<Collection<string, Champion>>;
    /**
     * Fetch and cache champions by their unique 3-digit keys.
     *
     * This is mostly for internal use while fetching match (or live match) data to improve performance.
     * Ideally, any user would be using {@link ChampionManager.fetch | fetch}.
     *
     * @param keys - The keys of the champions to fetch.
     * @param options - The basic fetching options.
     */
    fetchByKeys(keys: number[], options?: FetchOptions): Promise<Collection<string, Champion>>;
    /**
     * Fetch champion rotation data from Champion v3 API.
     *
     * This is the only method that needs a valid API key in this manager.
     * Needs access to the Champion v3 API.
     *
     * @param options - The basic fetching options.
     */
    fetchRotations(options?: FetchOptions): Promise<Collection<string, Champion[]>>;
    private _fetchLocalChamp;
    private _fetchLocalPricing;
    private _fetchLocalDamage;
}
//# sourceMappingURL=ChampionManager.d.ts.map