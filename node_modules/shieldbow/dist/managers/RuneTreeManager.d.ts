import type { Client } from '../client';
import type { BaseManager, FetchOptions } from '../types';
import { Rune, RuneTree } from '../structures';
import { Collection } from '@discordjs/collection';
/**
 * A rune trees manager - to fetch and manage rune trees data.
 */
export declare class RuneTreeManager implements BaseManager<RuneTree> {
    /**
     * The client this rune tree manager belongs to.
     */
    readonly client: Client;
    /**
     * Create a new rune trees manager.
     * @param client - The client this rune tree manager belongs to.
     */
    constructor(client: Client);
    /**
     * Fetch all rune trees.
     * @param options - The basic fetching options.
     */
    fetchAll(options?: FetchOptions): Promise<Collection<string, RuneTree>>;
    /**
     * Fetch all runes.
     * @param options - The basic fetching options.
     */
    fetchAllRunes(options?: FetchOptions): Promise<Rune[]>;
    /**
     * Fetch a rune tree by its key. The key is the same as the rune tree's name, for example - `Domination`.
     *
     * @param key - The key of the rune tree to fetch.
     * @param options - Additional fetch options.
     */
    fetch(key: string, options?: FetchOptions): Promise<RuneTree>;
    /**
     * Fetch a rune by its key. The key is mostly the same as the rune name, for example - `Electrocute`.
     *
     * @param key - The key of the rune.
     * @param options - Additional fetch options.
     */
    fetchRune(key: string, options?: FetchOptions): Promise<Rune>;
    /**
     * Fetch a rune tree by its name.
     * The search is case-insensitive.
     * The special characters are NOT ignored.
     *
     * @param name - The name of the rune tree to look for.
     * @param options - The basic fetching options.
     */
    fetchByName(name: string, options?: FetchOptions): Promise<RuneTree | undefined>;
    /**
     * Fetch a rune by its name.
     * The search is case-insensitive.
     * The special characters are not ignored.
     *
     * @param name - The name of the rune to look for.
     * @param options - The basic fetching options.
     */
    fetchRuneByName(name: string, options?: FetchOptions): Promise<Rune | undefined>;
    /**
     * Find a rune tree by its numerical ID.
     *
     * @param id - The numerical ID of the rune tree to look for.
     * @param options - The basic fetching options.
     */
    fetchById(id: number, options?: FetchOptions): Promise<RuneTree | undefined>;
    /**
     * Fetch a rune by its numerical ID.
     *
     * @param id - The numerical ID of the rune to look for.
     * @param options - The basic fetching options.
     */
    fetchRuneById(id: number, options?: FetchOptions): Promise<Rune | undefined>;
    private _fetchLocalRunes;
}
//# sourceMappingURL=RuneTreeManager.d.ts.map