import type { Client } from '../client';
import type { BaseManager, FetchOptions } from '../types';
import { Item } from '../structures';
import { Collection } from '@discordjs/collection';
/**
 * An item manager - to fetch and manage all item data.
 *
 * Does not require an API Key.
 */
export declare class ItemManager implements BaseManager<Item> {
    /**
     * The client this item manager belongs to.
     */
    readonly client: Client;
    /**
     * Create a new item manager.
     *
     * @param client - The client this item manager belongs to.
     */
    constructor(client: Client);
    /**
     * Fetch all items.
     * @param options - The basic fetching options.
     */
    fetchAll(options?: FetchOptions): Promise<Collection<string, Item>>;
    /**
     * Fetch an item by its 4-digit ID. The ID must be a string of 4 digits (not a number)
     *
     * @param key - The ID of the item to fetch.
     * @param options - The basic fetching options.
     */
    fetch(key: string, options?: FetchOptions): Promise<Item>;
    /**
     * Fetch an item by its name.
     * The search is case-insensitive.
     * The special characters are NOT ignored.
     *
     * @param name - The name of the item to look for.
     * @param options - The basic fetching options.
     */
    fetchByName(name: string, options?: FetchOptions): Promise<Item | undefined>;
    /**
     * Fetch multiple items at once.
     *
     * @param keys - The keys of the items to fetch.
     * @param options - The basic fetching options.
     */
    fetchMany(keys: string[], options?: FetchOptions): Promise<Collection<string, Item>>;
    private _fetchLocalItems;
}
//# sourceMappingURL=ItemManager.d.ts.map