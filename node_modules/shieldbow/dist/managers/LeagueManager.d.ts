import type { BaseManager, DivisionType, FetchOptions, QueueType, TierType } from '../types';
import type { Client } from '../client';
import { LeagueEntry, LeagueList } from '../structures';
import { Collection } from '@discordjs/collection';
/**
 * A league manager - to fetch and manage all summoner competitive info.
 *
 * Requires API key with access to `league-v4` and `league-exp-v4` API.
 */
export declare class LeagueManager implements BaseManager<Collection<QueueType, LeagueEntry>> {
    /**
     * The client this league manager belongs to.
     */
    readonly client: Client;
    /**
     * Creates a new League manager.
     * @param client - The client this league manager belongs to.
     */
    constructor(client: Client);
    /**
     * Fetch a summoner's competitive info by the summoner's ID.
     *
     * @param id - The ID of the summoner whose competitive info you want to find.
     * @param options - The basic fetching options.
     */
    fetch(id: string, options?: FetchOptions): Promise<Collection<QueueType, LeagueEntry>>;
    /**
     * Fetch a collection of league entries by the queue type, tier and division.
     *
     * @param queue - The type of queue - RANKED_SOLO_5x5, RANKED_FLEX_SR, etc.
     * @param tier - The tier of the entries - IRON to CHALLENGER.
     * @param division - The division of the entries - I, II, III, IV.
     * @param options - The basic fetching options (and page number - defaults to 1).
     */
    fetchByQueueAndTier(queue: QueueType, tier: TierType, division: DivisionType, options?: FetchOptions & {
        page: number;
    }): Promise<Collection<string, LeagueEntry>>;
    /**
     * Fetch the league entries by a league ID.
     *
     * @param leagueId - The League ID.
     * @param options - The basic fetching options (exception: `force` defaults to true).
     */
    fetchByLeagueId(leagueId: string, options?: FetchOptions): Promise<LeagueList>;
    private _fetchByQueueAndTier;
    private _fetchApexByQueue;
}
//# sourceMappingURL=LeagueManager.d.ts.map