import type { BaseManager, FetchOptions } from '../types';
import { Challenge, ChallengeRank, SummonerChallenge } from '../structures';
import { Collection } from '@discordjs/collection';
import type { Client } from '../client';
/**
 * A challenge manager - to fetch and manage all the challenges' data.
 *
 * Requires API key with access to `lol-challenges-v1` API.
 */
export declare class ChallengeManager implements BaseManager<Challenge> {
    /**
     * The client this challenge manager belongs to.
     */
    readonly client: Client;
    /**
     * Create a new challenge manager.
     * @param client - The client this challenge manager belongs to.
     */
    constructor(client: Client);
    /**
     * Fetch all challenges.
     * @param options - The basic fetching options (force is ignored here).
     */
    fetchAll(options?: FetchOptions): Promise<Collection<number, Challenge>>;
    /**
     * Fetch a challenge by the challenge ID.
     *
     * @param id - The ID of the challenge you want to find.
     * @param options - The basic fetching options.
     */
    fetch(id: number, options?: FetchOptions): Promise<Challenge>;
    /**
     * Fetch the leader board of a challenge.
     * @param id - The ID of the challenge whose leaderboard you want to find.
     * @param level - The tier of the leaderboard.
     * @param options - The basic fetching options, with an additional limit option. Limit (or count) is 200 by default.
     */
    fetchLeaderboard(id: number, level: 'MASTER' | 'GRANDMASTER' | 'CHALLENGER', options?: FetchOptions & {
        limit: number;
    }): Promise<ChallengeRank[]>;
    /**
     * Fetch the progress of a summoner in the challenges.
     * @param playerId - The player ID (puuid) of the summoner whose progress you want to find.
     * @param options - The basic fetching options.
     */
    fetchSummonerProgression(playerId: string, options?: FetchOptions): Promise<SummonerChallenge>;
}
//# sourceMappingURL=ChallengeManager.d.ts.map