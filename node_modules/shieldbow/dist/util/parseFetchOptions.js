"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseFetchOptions = void 0;
/**
 * A utility for parsing the fetch options using request specific, client config and default settings.
 */
const parseFetchOptions = (client, manager, options) => {
    // Destructure the options.
    const { region, ignoreCache, ignoreStorage, cache, store } = options ?? {};
    let parsedCache;
    let parsedStore;
    const parsed = {};
    // Region and force are easy.
    parsed.region = region || client.region;
    // Cache first prioritizes the specified option, then the client configuration, then the manager default.
    if (['champions', 'items', 'runes', 'summonerSpells'].includes(manager))
        parsedCache =
            typeof client.cacheEnabled.dragon === 'boolean'
                ? client.cacheEnabled.dragon
                : client.cacheEnabled.dragon[manager];
    else
        parsedCache =
            typeof client.cacheEnabled.api === 'boolean'
                ? client.cacheEnabled.api
                : client.cacheEnabled.api[manager];
    // Storage is the same as cache.
    if (['champions', 'items', 'runes', 'summonerSpells'].includes(manager))
        parsedStore =
            typeof client.storageEnabled.dragon === 'boolean'
                ? client.storageEnabled.dragon
                : client.storageEnabled.dragon[manager];
    else
        parsedStore =
            typeof client.storageEnabled.api === 'boolean'
                ? client.storageEnabled.api
                : client.storageEnabled.api[manager];
    parsed.store = store ?? parsedStore;
    parsed.cache = cache ?? parsedCache;
    parsed.ignoreCache = ignoreCache ?? !parsedCache;
    parsed.ignoreStorage = ignoreStorage ?? !parsedStore;
    return parsed;
};
exports.parseFetchOptions = parseFetchOptions;
//# sourceMappingURL=parseFetchOptions.js.map