"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryCache = void 0;
const collection_1 = require("@discordjs/collection");
/**
 * A basic caching manager that caches to the system memory using a Map.
 */
class MemoryCache {
    /**
     * Creates a new LocalCache instance.
     */
    constructor() {
        Object.defineProperty(this, "base", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.base = new collection_1.Collection();
    }
    /**
     * Clears the cache.
     */
    clear() {
        this.base.clear();
    }
    /**
     * Gets a value from the cache.
     * @param key - The key of the value to get.
     */
    get(key) {
        return this.base.get(key);
    }
    /**
     * Fetches all keys in the cache.
     */
    keys() {
        return [...this.base.keys()];
    }
    /**
     * Fetches all values stored in the cache.
     */
    values() {
        return [...this.base.values()];
    }
    /**
     * Finds a value in the cache using a predicate and a filter.
     * @param predicate - The predicate to use to find the value.
     */
    find(predicate) {
        return this.base.find(predicate);
    }
    has(key) {
        return this.base.has(key);
    }
    /**
     * Removes a value from the cache.
     * @param key - The key of the value to remove.
     */
    remove(key) {
        this.base.delete(key);
    }
    /**
     * Sets a value in the cache.
     * @param key - The key of the value to set.
     * @param value - The value to set.
     */
    set(key, value) {
        this.base.set(key, value);
    }
}
exports.MemoryCache = MemoryCache;
//# sourceMappingURL=MemoryCache.js.map