"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShieldbowLogger = void 0;
const tslib_1 = require("tslib");
const types_1 = require("../types");
const safe_1 = tslib_1.__importDefault(require("colors/safe"));
/**
 * Basic built-in debugging logger?.
 */
class ShieldbowLogger {
    /**
     * Create a new logger?.
     * @param level - The logger's level.
     */
    constructor(level) {
        /**
         * The logger's level, only messages above or equal to this level will be logged.
         */
        Object.defineProperty(this, "level", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.level = types_1.LoggerLevel[level || 'WARN'];
    }
    /**
     * Check whether a certain level is enabled.
     * @param level - The level to check.
     */
    hasLevel(level) {
        return this.level <= level;
    }
    /**
     * The base logging function.
     * @param level - The level at which the message should be logged.
     * @param message - The message to log.
     */
    log(level, ...message) {
        if (this.hasLevel(level)) {
            const date = new Date().toISOString();
            const levelString = `${types_1.LoggerLevel[level]}`.padEnd(8);
            const messages = message
                .map((m) => {
                if (typeof m === 'string')
                    return m;
                return JSON.stringify(m, null, 2);
            })
                .join(' ')
                .split('\n')
                .map((m) => `[${date}] ${levelString} :: ${m}`)
                .map((m) => {
                switch (level) {
                    case types_1.LoggerLevel.TRACE:
                        return safe_1.default.grey(m);
                    case types_1.LoggerLevel.DEBUG:
                        return safe_1.default.blue(m);
                    case types_1.LoggerLevel.INFO:
                        return safe_1.default.green(m);
                    case types_1.LoggerLevel.WARN:
                        return safe_1.default.yellow(m);
                    case types_1.LoggerLevel.ERROR:
                        return safe_1.default.red(m);
                    case types_1.LoggerLevel.CRITICAL:
                        return safe_1.default.bold(safe_1.default.red(m));
                }
            });
            console.log(messages.join('\n'));
        }
    }
    /**
     * Log a message at the CRITICAL level.
     * @param message - The message to log.
     */
    critical(...message) {
        this.log(types_1.LoggerLevel.CRITICAL, ...message);
    }
    /**
     * Log a message at the DEBUG level.
     * @param message - The message to log.
     */
    debug(...message) {
        this.log(types_1.LoggerLevel.DEBUG, ...message);
    }
    /**
     * Log a message at the ERROR level.
     * @param message - The message to log.
     */
    error(...message) {
        this.log(types_1.LoggerLevel.ERROR, ...message);
    }
    /**
     * Log a message at the INFO level.
     * @param message - The message to log.
     */
    info(...message) {
        this.log(types_1.LoggerLevel.INFO, ...message);
    }
    /**
     * Log a message at the TRACE level.
     * @param message - The message to log.
     */
    trace(...message) {
        this.log(types_1.LoggerLevel.TRACE, ...message);
    }
    /**
     * Log a message at the WARN level.
     * @param message - The message to log.
     */
    warn(...message) {
        this.log(types_1.LoggerLevel.WARN, ...message);
    }
}
exports.ShieldbowLogger = ShieldbowLogger;
//# sourceMappingURL=logger.js.map