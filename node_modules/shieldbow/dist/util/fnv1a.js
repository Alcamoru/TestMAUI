"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hash = void 0;
const FNV_PRIMES = {
    32: 16777619n,
    64: 1099511628211n,
    128: 309485009821345068724781371n,
    256: 374144419156711147060143317175368453031918731002211n
};
const FNV_OFFSETS = {
    32: 2166136261n,
    64: 14695981039346656037n,
    128: 144066263297769815596495629667062367629n,
    256: 100029257958052580907070968620625704837092796014241193945225284501741471925557n
};
/**
 * A simple fnv1a hashing utility - to help with community dragon data parsing.
 * @param str - The string that needs to be hashed.
 * @param size - The offset/primes size - defaults to 32.
 */
function hash(str, { size = 32 } = {}) {
    if (!FNV_PRIMES[size])
        throw new Error('The `size` option must be one of 32, 64, 128 or 256.');
    let hash = FNV_OFFSETS[size];
    const fnvPrime = FNV_PRIMES[size];
    let isUnicoded = false;
    for (let index = 0; index < str.length; index++) {
        let characterCode = str.charCodeAt(index);
        if (characterCode > 0x7f && !isUnicoded) {
            str = unescape(encodeURIComponent(str));
            characterCode = str.charCodeAt(index);
            isUnicoded = true;
        }
        hash ^= BigInt(characterCode);
        hash = BigInt.asUintN(size, hash * fnvPrime);
    }
    return hash.toString(16).padStart(8, '0');
}
exports.hash = hash;
//# sourceMappingURL=fnv1a.js.map