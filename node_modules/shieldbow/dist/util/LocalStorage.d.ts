import type { IStorage } from '../types';
import type { Client } from '../client';
/**
 * A basic storage plugin that stores data to the local file system.
 */
export declare class LocalStorage implements IStorage {
    private readonly _pathName;
    private readonly cache;
    private readonly client;
    /**
     * Creates a new LocalStorage instance.
     * @param client - The client to use.
     * @param root - The root path to use.
     */
    constructor(client: Client, root: string);
    /**
     * Fetches a value from storage.
     * @param id - The file name of the value to fetch.
     * @param key - The path to the value to fetch.
     */
    fetch<T>(key: string, id: string): Promise<T>;
    /**
     * Deletes a value from storage.
     * @param key - The path to the value to delete.
     * @param id - The file name of the value to delete.
     */
    remove(key: string, id: string): void;
    /**
     * Saves a value to storage.
     * @param value - The value to save.
     * @param key - The path to the value to save.
     * @param id - The file name of the value to save.
     */
    save<T>(value: T, key: string, id: string): Promise<T>;
    search<T>(key: string, query: {
        [key: string]: any;
    }): Promise<T[]>;
}
//# sourceMappingURL=LocalStorage.d.ts.map