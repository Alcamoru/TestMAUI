import { type ILogger, LoggerLevel, type LogLevel } from '../types';
/**
 * Basic built-in debugging logger?.
 */
export declare class ShieldbowLogger implements ILogger {
    /**
     * The logger's level, only messages above or equal to this level will be logged.
     */
    level: LoggerLevel;
    /**
     * Create a new logger?.
     * @param level - The logger's level.
     */
    constructor(level?: LogLevel);
    /**
     * Check whether a certain level is enabled.
     * @param level - The level to check.
     */
    hasLevel(level: LoggerLevel): boolean;
    /**
     * The base logging function.
     * @param level - The level at which the message should be logged.
     * @param message - The message to log.
     */
    log(level: LoggerLevel, ...message: any[]): void;
    /**
     * Log a message at the CRITICAL level.
     * @param message - The message to log.
     */
    critical(...message: any[]): void;
    /**
     * Log a message at the DEBUG level.
     * @param message - The message to log.
     */
    debug(...message: any[]): void;
    /**
     * Log a message at the ERROR level.
     * @param message - The message to log.
     */
    error(...message: any[]): void;
    /**
     * Log a message at the INFO level.
     * @param message - The message to log.
     */
    info(...message: any[]): void;
    /**
     * Log a message at the TRACE level.
     * @param message - The message to log.
     */
    trace(...message: any[]): void;
    /**
     * Log a message at the WARN level.
     * @param message - The message to log.
     */
    warn(...message: any[]): void;
}
//# sourceMappingURL=logger.d.ts.map