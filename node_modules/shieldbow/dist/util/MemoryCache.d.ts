import type { ICache } from '../types';
/**
 * A basic caching manager that caches to the system memory using a Map.
 */
export declare class MemoryCache implements ICache {
    private base;
    /**
     * Creates a new LocalCache instance.
     */
    constructor();
    /**
     * Clears the cache.
     */
    clear(): void;
    /**
     * Gets a value from the cache.
     * @param key - The key of the value to get.
     */
    get<T>(key: string): T;
    /**
     * Fetches all keys in the cache.
     */
    keys(): string[];
    /**
     * Fetches all values stored in the cache.
     */
    values(): any[];
    /**
     * Finds a value in the cache using a predicate and a filter.
     * @param predicate - The predicate to use to find the value.
     */
    find<T>(predicate: (t: T) => boolean): T | undefined;
    has(key: string): boolean;
    /**
     * Removes a value from the cache.
     * @param key - The key of the value to remove.
     */
    remove(key: string): void;
    /**
     * Sets a value in the cache.
     * @param key - The key of the value to set.
     * @param value - The value to set.
     */
    set<T>(key: string, value: T): void;
}
//# sourceMappingURL=MemoryCache.d.ts.map