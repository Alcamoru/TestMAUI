"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockRatelimitedResponse = exports.ApiError = void 0;
const tslib_1 = require("tslib");
const axios_1 = require("axios");
const help_1 = tslib_1.__importDefault(require("./help"));
/**
 * API error class.
 */
class ApiError extends Error {
    constructor(status, url, headers, response) {
        super(`${status}:: ${(0, help_1.default)(status)}.`);
        /**
         * The requested URL.
         */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The headers sent with the request.
         */
        Object.defineProperty(this, "headers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The received response object.
         */
        Object.defineProperty(this, "response", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = url;
        this.headers = headers;
        this.response = response;
    }
}
exports.ApiError = ApiError;
/**
 * A mock rate limit error response.
 * This is sent by the rate limiter when the rate limit is exceeded.
 * If it is an actual 429 response by the API, it is a problem with the rate limiter.
 */
exports.mockRatelimitedResponse = {
    data: undefined,
    status: 429,
    statusText: 'Too Many Requests',
    headers: {
        'Retry-After': '3000',
        'X-App-Rate-Limit': '20:1,100:120',
        'X-App-Rate-Limit-Count': '1:1,102:120',
        'X-Method-Rate-Limit': '2000:60',
        'X-Method-Rate-Limit-Count': '23:60',
        'X-Rate-Limit-Type': 'application'
    },
    config: {
        headers: new axios_1.AxiosHeaders()
    }
};
//# sourceMappingURL=error.js.map