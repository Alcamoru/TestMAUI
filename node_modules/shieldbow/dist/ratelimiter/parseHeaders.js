"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseHeaders = void 0;
/**
 * Parses the rate limit headers.
 * @param headers - The headers to parse.
 */
function parseHeaders(headers) {
    const usage = { app: [Date.now()], method: [Date.now()] };
    const app = [];
    const method = [];
    if (headers['x-app-rate-limit']) {
        const limits = headers['x-app-rate-limit'].split(',').map((limit) => limit.split(':'));
        for (const [limit, duration] of limits)
            app.push({ limit: parseInt(limit, 10), duration: parseInt(duration, 10) * 1000 });
    }
    if (headers['x-method-rate-limit']) {
        const limits = headers['x-method-rate-limit'].split(',').map((limit) => limit.split(':'));
        for (const [limit, duration] of limits)
            method.push({ limit: parseInt(limit, 10), duration: parseInt(duration, 10) * 1000 });
    }
    if (headers['x-app-rate-limit-count']) {
        usage.app = [];
        const counts = headers['x-app-rate-limit-count']
            .split(',')
            .map((count) => count.split(':'))
            .sort((a, b) => parseInt(a[1], 10) - parseInt(b[1], 10));
        let prev = 0;
        for (const [count, duration] of counts) {
            const parsedDuration = parseInt(duration, 10) * 1000;
            usage.app.push(...Array.from({ length: parseInt(count, 10) }, () => Date.now() - prev));
            prev = parsedDuration + 1000;
        }
    }
    if (headers['x-method-rate-limit-count']) {
        usage.method = [];
        const counts = headers['x-method-rate-limit-count']
            .split(',')
            .map((count) => count.split(':'))
            .sort((a, b) => parseInt(a[1], 10) - parseInt(b[1], 10));
        let prev = 0;
        for (const [count, duration] of counts) {
            const parsedDuration = parseInt(duration, 10) * 1000;
            usage.method.push(...Array.from({ length: parseInt(count, 10) }, () => Date.now() - prev));
            prev = parsedDuration + 1000;
        }
    }
    return { app, method, usage };
}
exports.parseHeaders = parseHeaders;
//# sourceMappingURL=parseHeaders.js.map