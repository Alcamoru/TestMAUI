import type { ChampionData, ChampionPassive, ChampionPricing, ChampionRating, ChampionSprite, MerakiChampion, SpellDamageData, Stats } from '../../types';
import type { Client } from '../../client';
import { Collection } from '@discordjs/collection';
import { ChampionSkin, ChampionSpell, ChampionStat } from '../index';
/**
 * A representation of a League of Legends champion.
 */
export declare class Champion {
    /**
     * The name of the champion.
     */
    readonly name: string;
    /**
     * The ID of the champion. To get the ID, in the champion's name
     *
     * - Capitalize the words
     *
     * - Remove any spaces and special characters
     *
     * - The words after a `'` - such as in Kai'sa, remain lowercase.
     *
     * Examples:
     *
     * - Kayn -\> Kayn
     *
     * - Cho'Gath -\> Chogath
     *
     * - Dr. Mundo -\> DrMundo
     *
     * There are 2 exceptions to this rule.
     *
     * 1. Wukong -\> MonkeyKing
     *
     * 2. Renata Glasc -\> Renata
     */
    readonly id: string;
    /**
     * The key - a 3-digit number, that is used to identify the champion.
     */
    readonly key: number;
    /**
     * A title given to the champion based on their lore.
     */
    readonly title: string;
    /**
     * A URL to the champion's icon.
     */
    readonly icon: string;
    /**
     * The complete lore of the champion.
     */
    readonly lore: string;
    /**
     * A shortened version of the champion's lore.
     */
    readonly blurb: string;
    /**
     * An array of tips to play against this champion.
     */
    readonly enemyTips: string[];
    /**
     * An array of tips to play as/along this champion.
     */
    readonly allyTips: string[];
    /**
     * The champion classes this champion belongs to, such as - Fighter, Tank, Assassin, etc.
     */
    readonly classes: string[];
    /**
     * The resource represented by the bar below this champion's health bar in game.
     */
    readonly resource: string;
    /**
     * A collection of the champion's base stats.
     */
    readonly stats: Collection<Stats, ChampionStat>;
    /**
     * A collection of the available skins for this champion.
     * The default skin always has the id - `0`.
     */
    readonly skins: Collection<number, ChampionSkin>;
    /**
     * The champion's spells (abilities), mapped by the key they are assigned to, by default - Q, W, E, R, respectively.
     */
    readonly spells: Collection<'Q' | 'W' | 'E' | 'R', ChampionSpell>;
    /**
     * The champion's magic, defense, attack, difficulty ratings.
     */
    readonly ratings: ChampionRating;
    /**
     * The champion's passive ability summarized.
     */
    readonly passive: ChampionPassive;
    /**
     * The in-game pricing of the champion.
     */
    readonly pricing: ChampionPricing;
    /**
     * The sprite information of the champion.
     */
    readonly sprite: ChampionSprite;
    /**
     * The type of this champion's basic attacks - RANGED or MELEE.
     */
    readonly attackType: string;
    /**
     * The date this champion was released on.
     */
    readonly releaseDate: string;
    /**
     * The patch this champion was introduced to the live servers.
     */
    readonly releasePatch: string;
    /**
     * Creates a new champion instance.
     * @param client - The client creating this instance.
     * @param data - The raw champion data from data dragon.
     * @param damage - The raw champion data from community dragon
     * @param meraki - The raw champion data from meraki analytics
     */
    constructor(client: Client, data: ChampionData, damage: SpellDamageData, meraki: MerakiChampion);
    /**
     * The champion's default skin splash art.
     */
    get defaultSplashArt(): string;
    /**
     * The champion's default skin loading screen art.
     */
    get defaultLoadingScreen(): string;
}
//# sourceMappingURL=Champion.d.ts.map