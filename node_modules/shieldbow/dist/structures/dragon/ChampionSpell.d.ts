import type { SpellDamageData, SpellData } from '../../types';
import type { Champion } from '../index';
import type { Client } from '../../client';
/**
 * The representation of a champion's spell (ability).
 */
export declare class ChampionSpell {
    /**
     * The ID of the spell.
     */
    readonly id: string;
    /**
     * The displayed name of the ability.
     */
    readonly name: string;
    /**
     * A short textual description of the ability.
     */
    readonly description: string;
    /**
     * The URL to the icon of this ability.
     */
    readonly icon: string;
    /**
     * The max number of skill points (gained by leveling up the champion) that can be put into this spell.
     */
    readonly maxRank: number;
    /**
     * The cooldown of this ability (in seconds).
     *
     * If the cooldown scales with rank of the ability, will be of the format - `r1/r2/r3...`
     *
     * Where `r1` is the cooldown at rank 1, `r2` is the cooldown at rank 2, and so on.
     */
    readonly cooldown: string;
    /**
     * Numerical representation of the spell's cooldown.
     * The array contains the cooldown sorted by ranks.
     *
     * To get the cooldown at rank 3, you can use `spell.cooldownByLevel[2]`.
     */
    readonly cooldownByLevel: number[];
    /**
     * The cost of using this spell (contains the resource used/generated).
     */
    readonly cost: string;
    /**
     * The numerical representation of the spell's costs.
     * The array contains the cost sorted by ranks.
     *
     * To get the cost at rank 3, you can use `spell.costByLevel[2]`.
     */
    readonly costByLevel: number[];
    /**
     * The resource needed to use the ability.
     */
    readonly costType: string;
    /**
     * The number of times this ability can be used.
     * -1 indicates it has no ammo system.
     */
    readonly maxAmmo: number;
    private readonly champ;
    /**
     * Creates a new Champion Spell instance.
     * @param client - The client creating this instance.
     * @param champ - The champion this spell belongs to.
     * @param data - The raw spell data from data dragon.
     * @param damage - The raw spell data from community dragon.
     */
    constructor(client: Client, champ: Champion, data: SpellData, damage: SpellDamageData);
    private _rawTooltip;
    /**
     * The raw tooltip of the champion spell.
     * This is a more detailed description and contains the numbers of any effects and damage the spell applies.
     *
     * The raw tooltip also contains some HTML-like tags such as `<scaleAP>`
     * to help style it better if you are making a website that needs to use this.
     */
    get rawTooltip(): string;
    /**
     * The tooltip of the champion spell.
     * This is a more detailed description and contains the numbers of any effects and damage the spell applies.
     *
     * The tooltip is cleaned off of any HTML-like tags to display text in a nicer format.
     */
    get tooltip(): string;
    private static _parseDataValues;
    private _parseTooltip;
    private _performSpellMath;
}
//# sourceMappingURL=ChampionSpell.d.ts.map