"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rune = void 0;
/**
 * A representation of an in-game rune.
 */
class Rune {
    /**
     * Creates a new Rune instance.
     * @param client - The client that requested this data.
     * @param data - The raw rune data from data dragon.
     */
    constructor(client, data) {
        /**
         * The numerical unique ID of this rune.
         */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The worded key for this rune.
         */
        Object.defineProperty(this, "key", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The name of this rune.
         */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A link to the rune's icon.
         */
        Object.defineProperty(this, "icon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_rawDescription", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_rawDetails", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        client.logger?.trace(`Parsing rune data (id: ${data.id})`);
        this.id = data.id;
        this.key = data.key;
        this.name = data.name;
        this.icon = client.cdnBase + 'img/' + data.icon;
        this._rawDescription = data.shortDesc;
        this._rawDetails = data.longDesc;
    }
    /**
     * The raw description (short version) provided by Data Dragon.
     * This contains some HTML-like tags that help to display it on webpages.
     *
     * See {@link Rune.description | description} to view the description with all the HTML-like tags stripped out.
     */
    get rawDescription() {
        return this._rawDescription;
    }
    /**
     * The description (short version) of this rune provided by Data Dragon.
     * This does not contain the HTML-like tags to help view this better on console or other output media.
     *
     * See {@link Rune.rawDescription | rawDescription} to view the description with the HTML-like tags included.
     */
    get description() {
        return this.rawDescription
            .replace(/\.(?=[A-Z])/g, '.\n\n')
            .replaceAll(/<(br|li|p)\s*\/?>/g, '\n')
            .replace(/<\/?[^>]+(>|$)/g, '');
    }
    /**
     * The details (long version) about this rune provided by Data Dragon.
     * This contains some HTML-like tags that help to display it on webpages.
     *
     * See {@link Rune.details | details} to view the details with all the HTML-like tags stripped out.
     */
    get rawDetails() {
        return this._rawDetails;
    }
    /**
     * The details (long version) about this rune provided by Data Dragon.
     * This does not contain the HTML-like tags to help view this better on console or other output media.
     *
     * See {@link Rune.rawDetails | rawDetails} to view the details with all the HTML-like tags included.
     */
    get details() {
        return this.rawDetails
            .replace(/\.(?=[A-Z])/g, '.\n\n')
            .replaceAll(/<(br|li|p)\s*\/?>/g, '\n')
            .replace(/<\/?[^>]+(>|$)/g, '');
    }
}
exports.Rune = Rune;
//# sourceMappingURL=Rune.js.map