"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuneTree = void 0;
const collection_1 = require("@discordjs/collection");
const Rune_1 = require("./Rune");
/**
 * A representation of an in-game rune tree
 */
class RuneTree {
    /**
     * Creates a new RuneTree instance.
     * @param client - The client that requested this data.
     * @param data - The raw rune tree data from data dragon.
     */
    constructor(client, data) {
        /**
         * The unique numerical ID of this Rune Tree.
         */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The key of this rune tree. Usually the same as the rune's name.
         */
        Object.defineProperty(this, "key", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A link to the rune tree's icon.
         */
        Object.defineProperty(this, "icon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The name of this rune tree.
         */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The slots of this rune tree.
         * The slots are numbered from 1 to 4.
         * The first slot contains the keystones.
         */
        Object.defineProperty(this, "slots", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        client.logger?.trace(`Parsing rune tree data (id: ${data.id})`);
        this.id = data.id;
        this.key = data.key;
        this.icon = client.cdnBase + 'img/' + data.icon;
        this.name = data.name;
        this.slots = new collection_1.Collection();
        this.slots.set(1, new collection_1.Collection());
        this.slots.set(2, new collection_1.Collection());
        this.slots.set(3, new collection_1.Collection());
        this.slots.set(4, new collection_1.Collection());
        data.slots.map((rTree, i) => rTree.runes.map((r, j) => this.slots.get(i + 1)?.set(j + 1, new Rune_1.Rune(client, r))));
    }
}
exports.RuneTree = RuneTree;
//# sourceMappingURL=RuneTree.js.map