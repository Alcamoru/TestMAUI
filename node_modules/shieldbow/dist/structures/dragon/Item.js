"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Item = void 0;
/**
 * A representation of an in-game item.
 */
class Item {
    /**
     * Create a new item instance.
     * @param client - The client requesting the data.
     * @param id - The ID of the item.
     * @param data - The raw item data from data dragon.
     */
    constructor(client, id, data) {
        /**
         * The 4-digit unique ID (numerical ID as a string) of the item.
         */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The displayed name of this item.
         */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A short-description of this object.
         * `plaintext` attribute in the data dragon file.
         */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * More detailed description of the item.
         * Raw details contain some html-like tags.
         * This is the raw details from the data dragon API.
         *
         * See {@link Item.details | details} if you want to see it with the tags processed out.
         */
        Object.defineProperty(this, "rawDetails", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether this item is a consumable.
         *
         * Consumables give you temporary buffs or vision after consumption.
         */
        Object.defineProperty(this, "consumable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether this item is automatically consumed if you do not have an available item slot.
         */
        Object.defineProperty(this, "consumeOnFull", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * If this has a value, it means this item can be stacked in the same item slot.
         * The value indicates the quantity of this item you can store in one slot.
         */
        Object.defineProperty(this, "stacks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether this item is listed in the in-game store.
         */
        Object.defineProperty(this, "inStore", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether this item can be bought from the store.
         */
        Object.defineProperty(this, "hideFromAll", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * If this field is defined, then this item can only be bought/owned by this champion.
         */
        Object.defineProperty(this, "requiredChampionId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A link to the image assigned to this item in-game.
         */
        Object.defineProperty(this, "image", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The value of this item in terms of in-game gold.
         */
        Object.defineProperty(this, "goldValue", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Some tags assigned to this item.
         */
        Object.defineProperty(this, "tags", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The list of maps on which you can buy this item.
         */
        Object.defineProperty(this, "availability", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A list of stats this item provides.
         * To learn more about these stats, {@link https://developer.riotgames.com/docs/lol#data-dragon_items | documentation}
         */
        Object.defineProperty(this, "stats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The kind of item this is in-game.
         * By default, all items are set to be `Basic`.
         * There might be some issues with items that do not have their `depth` set in the data dragon JSON.
         */
        Object.defineProperty(this, "kind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fromIds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "intoIds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "specialRecipeId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        client.logger?.trace(`Parsing item data (id: ${id})`);
        this.client = client;
        this.id = id;
        this.name = data.name;
        this.description = data.plaintext;
        this.rawDetails = data.description;
        this.consumable = data.consumed || false;
        this.consumeOnFull = data.consumeOnFull || false;
        this.stacks = data.stacks;
        this.fromIds = data.from || [];
        this.intoIds = data.into || [];
        this.specialRecipeId = data.specialRecipe?.toString();
        this.inStore = data.inStore ?? true;
        this.hideFromAll = data.hideFromAll || false;
        this.image = `${client.cdnBase}${client.version}/img/item/${id}.png`;
        this.goldValue = data.gold;
        this.tags = data.tags;
        this.availability = client.maps.filter((m) => data.maps[m.mapId.toString()]);
        this.stats = data.stats;
        this.kind = this.parseDepth(data.depth || 1);
        this.requiredChampionId = data.requiredChampion;
    }
    /**
     * More detailed description of the item.
     * This is the processed details.
     * With all the HTML-like tags removed.
     *
     * See {@link Item.rawDetails | rawDetails} if you want the raw data.
     */
    get details() {
        return this.rawDetails
            .replace(/\.(?=[A-Z])/g, '.\n\n')
            .replaceAll(/<(br|li|p)\s*\/?>/g, '\n')
            .replace(/<\/?[^>]+(>|$)/g, '');
    }
    /**
     * If this is not undefined, then this item can only be bought/owned by this champion.
     */
    async requiredChampion() {
        if (!this.requiredChampionId)
            return Promise.reject('This item is not champion-specific.');
        return this.client.champions.fetch(this.requiredChampionId);
    }
    /**
     * The components of this item.
     * You need to buy these item and spend additional gold to get this item.
     */
    async from() {
        const fromItems = await this.client.items.fetchMany(this.fromIds);
        return this.fromIds.map((id) => fromItems.get(id));
    }
    /**
     * A collection of items the current item is a component of.
     */
    async into() {
        const intoItems = await this.client.items.fetchMany(this.intoIds);
        return this.intoIds.map((id) => intoItems.get(id));
    }
    /**
     * If this is defined, you cannot buy this item from the store.
     * Instead, you need to buy the `specialRecipe` item and complete a quest to get it.
     */
    async specialRecipe() {
        return this.specialRecipeId ? this.client.cache.get(this.specialRecipeId) : undefined;
    }
    parseDepth(depth) {
        if (this.rawDetails.includes('Mythic Passive'))
            return 'Mythic';
        const itemTypes = ['Basic', 'Epic', 'Legendary'];
        return itemTypes[depth - 1];
    }
}
exports.Item = Item;
//# sourceMappingURL=Item.js.map