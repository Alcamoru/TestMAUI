"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SummonerSpell = void 0;
/**
 * A representation of an in-game summoner spell.
 */
class SummonerSpell {
    /**
     * Creates a new Summoner Spell instance.
     * @param client - The client that requested this data.
     * @param data - The raw summoner spell data from the API.
     */
    constructor(client, data) {
        /**
         * The ID of this summoner spell.
         */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The numerical ID of this summoner spell.
         */
        Object.defineProperty(this, "key", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The name of this summoner spell.
         */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The description of this summoner spell.
         */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The raw tooltip of this summoner spell.
         * This contains some HTML-like tags to help view this better on webpages.
         *
         * Even though, these are supposed to be more detailed than the {@link SummonerSpell.description}.
         * It is not recommended using either this OR {@link SummonerSpell.tooltip}.
         * This is because they contain placeholders without values to fill them with.
         * Use {@link SummonerSpell.description} instead.
         *
         * See {@link SummonerSpell.tooltip | tooltip} to view this with the HTML-like tags stripped out.
         */
        Object.defineProperty(this, "rawTooltip", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The cooldown of this summoner spell (in seconds)
         */
        Object.defineProperty(this, "cooldown", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The level of this summoner spell.
         * This is the summoner level at which you unlock this spell.
         */
        Object.defineProperty(this, "summonerLevel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The game modes you can pick this summoner spell in.
         */
        Object.defineProperty(this, "modes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Number of times you can use this spell before it goes on a cooldown.
         */
        Object.defineProperty(this, "maxAmmo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The range of this spell, i.e. how many units far away can you cast this from.
         */
        Object.defineProperty(this, "range", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A link to the image that represents this summoner spell.
         */
        Object.defineProperty(this, "image", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        client.logger?.trace(`Parsing summoner spell data (id: ${data.id})`);
        this.id = data.id;
        this.key = parseInt(data.key);
        this.name = data.name;
        this.description = data.description;
        this.rawTooltip = data.tooltip;
        this.cooldown = parseInt(data.cooldownBurn);
        this.summonerLevel = data.summonerLevel;
        this.modes = client.gameModes.filter((m) => data.modes.includes(m.gameMode));
        this.maxAmmo = parseInt(data.maxammo);
        this.range = parseInt(data.rangeBurn);
        this.image = client.cdnBase + client.version + `/img/spell/${data.image.full}`;
    }
    /**
     * The tooltip of this summoner spell.
     * This does not contain the HTML-like tags to help view this better on console and other output media.
     *
     * See {@link SummonerSpell.rawTooltip | rawTooltip} to view this with the HTML-like tags included.
     */
    get tooltip() {
        return this.rawTooltip
            .replace(/\.(?=[A-Z])/g, '.\n\n')
            .replaceAll(/<(br|li|p)\s*\/?>/g, '\n')
            .replace(/<\/?[^>]+(>|$)/g, '');
    }
}
exports.SummonerSpell = SummonerSpell;
//# sourceMappingURL=SummonerSpell.js.map