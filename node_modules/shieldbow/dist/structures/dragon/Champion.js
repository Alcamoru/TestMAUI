"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Champion = void 0;
const collection_1 = require("@discordjs/collection");
const index_1 = require("../index");
/**
 * A representation of a League of Legends champion.
 */
class Champion {
    /**
     * Creates a new champion instance.
     * @param client - The client creating this instance.
     * @param data - The raw champion data from data dragon.
     * @param damage - The raw champion data from community dragon
     * @param meraki - The raw champion data from meraki analytics
     */
    constructor(client, data, damage, meraki) {
        /**
         * The name of the champion.
         */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the champion. To get the ID, in the champion's name
         *
         * - Capitalize the words
         *
         * - Remove any spaces and special characters
         *
         * - The words after a `'` - such as in Kai'sa, remain lowercase.
         *
         * Examples:
         *
         * - Kayn -\> Kayn
         *
         * - Cho'Gath -\> Chogath
         *
         * - Dr. Mundo -\> DrMundo
         *
         * There are 2 exceptions to this rule.
         *
         * 1. Wukong -\> MonkeyKing
         *
         * 2. Renata Glasc -\> Renata
         */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The key - a 3-digit number, that is used to identify the champion.
         */
        Object.defineProperty(this, "key", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A title given to the champion based on their lore.
         */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A URL to the champion's icon.
         */
        Object.defineProperty(this, "icon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The complete lore of the champion.
         */
        Object.defineProperty(this, "lore", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A shortened version of the champion's lore.
         */
        Object.defineProperty(this, "blurb", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * An array of tips to play against this champion.
         */
        Object.defineProperty(this, "enemyTips", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * An array of tips to play as/along this champion.
         */
        Object.defineProperty(this, "allyTips", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The champion classes this champion belongs to, such as - Fighter, Tank, Assassin, etc.
         */
        Object.defineProperty(this, "classes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The resource represented by the bar below this champion's health bar in game.
         */
        Object.defineProperty(this, "resource", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A collection of the champion's base stats.
         */
        Object.defineProperty(this, "stats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A collection of the available skins for this champion.
         * The default skin always has the id - `0`.
         */
        Object.defineProperty(this, "skins", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The champion's spells (abilities), mapped by the key they are assigned to, by default - Q, W, E, R, respectively.
         */
        Object.defineProperty(this, "spells", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The champion's magic, defense, attack, difficulty ratings.
         */
        Object.defineProperty(this, "ratings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The champion's passive ability summarized.
         */
        Object.defineProperty(this, "passive", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The in-game pricing of the champion.
         */
        Object.defineProperty(this, "pricing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The sprite information of the champion.
         */
        Object.defineProperty(this, "sprite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The type of this champion's basic attacks - RANGED or MELEE.
         */
        Object.defineProperty(this, "attackType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The date this champion was released on.
         */
        Object.defineProperty(this, "releaseDate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The patch this champion was introduced to the live servers.
         */
        Object.defineProperty(this, "releasePatch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        client.logger?.trace(`Parsing champion data (id: ${data.id})`);
        this.name = data.name;
        this.id = data.id;
        this.key = parseInt(data.key);
        this.title = data.title;
        this.icon = `${client.cdnBase}${client.version}/img/champion/${data.image.full}`;
        this.lore = data.lore;
        this.blurb = data.blurb;
        this.enemyTips = data.enemytips;
        this.allyTips = data.allytips;
        this.classes = data.tags;
        this.resource = data.partype;
        this.stats = new collection_1.Collection();
        this.stats.set('hp', new index_1.ChampionStat(data.stats.hp, data.stats.hpperlevel));
        this.stats.set('mp', new index_1.ChampionStat(data.stats.mp, data.stats.mpperlevel));
        this.stats.set('ms', new index_1.ChampionStat(data.stats.movespeed, 0));
        this.stats.set('armor', new index_1.ChampionStat(data.stats.armor, data.stats.armorperlevel));
        this.stats.set('spellBlock', new index_1.ChampionStat(data.stats.spellblock, data.stats.spellblockperlevel));
        this.stats.set('hpRegen', new index_1.ChampionStat(data.stats.hpregen, data.stats.hpregenperlevel));
        this.stats.set('mpRegen', new index_1.ChampionStat(data.stats.mpregen, data.stats.mpregenperlevel));
        this.stats.set('attackRange', new index_1.ChampionStat(data.stats.attackrange, 0));
        this.stats.set('attackDamage', new index_1.ChampionStat(data.stats.attackdamage, data.stats.attackdamageperlevel));
        this.stats.set('attackSpeed', new index_1.ChampionStat(data.stats.attackspeed, data.stats.attackspeedperlevel / 100));
        this.stats.set('crit', new index_1.ChampionStat(data.stats.crit, data.stats.critperlevel));
        this.skins = new collection_1.Collection();
        this.spells = new collection_1.Collection();
        this.attackType = meraki.attackType;
        this.releaseDate = meraki.releaseDate;
        this.releasePatch = meraki.releasePatch;
        this.pricing = {
            be: meraki.price.blueEssence,
            rp: meraki.price.rp,
            sale: meraki.price.saleRp
        };
        data.skins
            .filter((s) => meraki.skins.find((ms) => ms.id.toString() === s.id))
            .map((s) => this.skins.set(s.num, new index_1.ChampionSkin(this, s, meraki.skins.find((ms) => ms.id.toString() === s.id))));
        data.spells.map((s, i) => {
            const keys = ['Q', 'W', 'E', 'R'];
            const key = keys[i];
            this.spells.set(key, new index_1.ChampionSpell(client, this, s, damage));
        });
        this.ratings = data.info;
        this.passive = {
            name: data.passive.name,
            description: data.passive.description.replace(/<\/?[^>]+(>|$)/g, '').replace(/\.(?=\w\D)/g, '.\n\n'),
            icon: `${client.cdnBase}${client.version}/img/passive/${data.passive.image.full}`
        };
        this.sprite = {
            coordinate: { x: data.image.x, y: data.image.y },
            image: `${client.cdnBase}${client.version}/img/sprite/${data.image.sprite}`,
            size: { h: data.image.h, w: data.image.w }
        };
    }
    /**
     * The champion's default skin splash art.
     */
    get defaultSplashArt() {
        return this.skins.get(0).splashArt;
    }
    /**
     * The champion's default skin loading screen art.
     */
    get defaultLoadingScreen() {
        return this.skins.get(0).loadingScreen;
    }
}
exports.Champion = Champion;
//# sourceMappingURL=Champion.js.map