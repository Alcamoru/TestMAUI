import type { BuildingKillEventData, ChampionKillEventData, ChampionSpecialKillEventData, ChampionTransformEventData, DamageDealtData, DragonSoulGivenEventData, EliteMonsterKillEventData, GameEndEventData, ItemDestroyedEventData, ItemPurchasedEventData, ItemSoldEventData, ItemUndoEventData, LevelUpEventData, ObjectiveBountyPrestartEventData, PauseEndEventData, SkillLevelUpEventData, TimelineEventData, TurretPlateDestroyedEventData, WardKillEventData, WardPlacedEventData } from '../../types';
import { Position } from '../Position';
import { Bounty } from './Bounty';
import type { Item } from '../dragon';
import type { Collection } from '@discordjs/collection';
/**
 * A representation of an event in a match timeline.
 */
export declare class TimelineEvent {
    /**
     * The timestamp (in milliseconds) of the event since the start of the game.
     */
    readonly timestamp: number;
    /**
     * The type of event.
     */
    readonly type: string;
    /**
     * The raw data of this event - in case the event is not defined in the library.
     *
     * If you ever encounter an event where you need to access this, please create a GitHub issue as well
     * with the event type and the raw data at https://github.com/TheDrone7/shieldbow/issues.
     */
    readonly rawData: any;
    /**
     * Create a new timeline event.
     * @param data - The raw data of the event.
     */
    constructor(data: TimelineEventData);
}
/**
 * A representation of the Pause end event.
 *
 * Takes place when a game pause ends or when the game first begins after the loading screen.
 */
export declare class PauseEndEvent extends TimelineEvent {
    /**
     * The type of the event;
     */
    readonly type: 'PAUSE_END';
    /**
     * The real timestamp - the actual time when this pause ended.
     */
    readonly realTimestamp: number;
    /**
     * Create a new pause end event.
     * @param data - The raw data of the event.
     */
    constructor(data: PauseEndEventData);
    /**
     * The real time when the pause ended.
     */
    get realTime(): Date;
}
/**
 * A representation of the Skill Level Up event.
 */
export declare class SkillLevelUpEvent extends TimelineEvent {
    /**
     * The type of the event.
     */
    readonly type: 'SKILL_LEVEL_UP';
    /**
     * The type of the level up - usually 'NORMAL'.
     */
    readonly levelUpType: string;
    /**
     * The participant ID of the participant who leveled up.
     */
    readonly participantId: number;
    /**
     * The skill slot that was leveled up - 1/2/3/4.
     */
    readonly skillSlot: number;
    /**
     * Create a new skill level up event.
     * @param data - The raw data of the event.
     */
    constructor(data: SkillLevelUpEventData);
    /**
     * The skill slot that was leveled up - Q/W/E/R.
     */
    get skillSlotLetter(): 'Q' | 'W' | 'E' | 'R';
    /**
     * Whether the leveled up skill was the ultimate skill of the champion.
     */
    get isUltimate(): boolean;
}
/**
 * A representation of the Item Purchased event.
 */
export declare class ItemPurchasedEvent extends TimelineEvent {
    /**
     * The type of the event.
     */
    readonly type: 'ITEM_PURCHASED';
    /**
     * The item that was purchased.
     */
    readonly item: Item;
    /**
     * The participant who purchased the item.
     */
    readonly participantId: number;
    /**
     * Create a new item purchased event.
     * @param data - The raw data of the event.
     * @param item - The item that was purchased.
     */
    constructor(data: ItemPurchasedEventData, item: Item);
}
/**
 * A representation of the Item Undo event.
 */
export declare class ItemUndoEvent extends TimelineEvent {
    /**
     * The type of the event.
     */
    readonly type: 'ITEM_UNDO';
    /**
     * The item in the item slot after the undo (might be nothing).
     */
    readonly after?: Item;
    /**
     * The item in the item slot before the undo.
     */
    readonly before?: Item;
    /**
     * The amount of gold that was gained by the undo.
     */
    readonly goldGain: number;
    /**
     * The participant who undid the item.
     */
    readonly participantId: number;
    /**
     * Create a new item undo event.
     * @param data - The raw data of the event.
     * @param after - The item in the item slot after the undo (might be nothing).
     * @param before - The item in the item slot before the undo.
     */
    constructor(data: ItemUndoEventData, after?: Item, before?: Item);
}
/**
 * A representation of the Ward Placed event.
 */
export declare class WardPlacedEvent extends TimelineEvent {
    /**
     * The type of the event.
     */
    readonly type: 'WARD_PLACED';
    /**
     * The ID of the participant who placed the ward.
     */
    readonly creatorId: number;
    /**
     * The type of the ward that was placed.
     */
    readonly wardType: string;
    /**
     * Create a new ward placed event.
     * @param data - The raw data of the event.
     */
    constructor(data: WardPlacedEventData);
}
/**
 * A representation of the Item destroyed event.
 */
export declare class ItemDestroyedEvent extends TimelineEvent {
    /**
     * The type of the event.
     */
    readonly type: 'ITEM_DESTROYED';
    /**
     * The destroyed item.
     */
    readonly item: Item;
    /**
     * The ID of the participant that destroyed the item.
     */
    readonly participantId: number;
    /**
     * Create a new item destroyed event.
     * @param data - The raw data of the event.
     * @param item - The destroyed item.
     */
    constructor(data: ItemDestroyedEventData, item: Item);
}
/**
 * A representation of the Level up event.
 */
export declare class LevelUpEvent extends TimelineEvent {
    /**
     * The type of the event.
     */
    readonly type: 'LEVEL_UP';
    /**
     * The ID of the participant who leveled up.
     */
    readonly participantId: number;
    /**
     * The level the participant reached.
     */
    readonly level: number;
    /**
     * Create a new level up event.
     * @param data - The raw data of the event.
     */
    constructor(data: LevelUpEventData);
}
/**
 * The representation of the Champion Kill event.
 */
export declare class ChampionKillEvent extends TimelineEvent {
    /**
     * The participants who assisted in the kill.
     */
    readonly assistingParticipantIds: number[];
    /**
     * The bounty achieved by the killer.
     */
    readonly bounty: Bounty;
    /**
     * The kill streak length of the killer.
     */
    readonly killStreakLength: number;
    /**
     * The ID of the participant who landed the killing blow.
     */
    readonly killerId: number;
    /**
     * The position at which the kill took place.
     */
    readonly position: Position;
    /**
     * The damage dealt by the victim.
     */
    readonly victimDamageDealt: DamageDealtData[];
    /**
     * The damage dealt to the victim.
     */
    readonly victimDamageReceived: DamageDealtData[];
    /**
     * The ID of the participant that died.
     */
    readonly victimId: number;
    /**
     * The bounty earned by the killer.
     */
    readonly shutdownBounty: number;
    /**
     * The type of the event.
     */
    readonly type: 'CHAMPION_KILL';
    /**
     * Create a new champion kill event.
     * @param data - The raw data of the event.
     */
    constructor(data: ChampionKillEventData);
}
/**
 * A representation of the Champion special kill event.
 */
export declare class ChampionSpecialKillEvent extends TimelineEvent {
    /**
     * The ID of the participant that performed the special kill.
     */
    readonly killerId: number;
    /**
     * The position at which the special kill took place.
     */
    readonly position: Position;
    /**
     * The type of the special kill.
     */
    readonly killType: string;
    /**
     * The type of the event.
     */
    readonly type: 'CHAMPION_SPECIAL_KILL';
    /**
     * Create a new champion special kill event.
     * @param data - The raw data of the event.
     */
    constructor(data: ChampionSpecialKillEventData);
}
/**
 * A representation of the Turret place destroyed event.
 */
export declare class TurretPlateDestroyedEvent extends TimelineEvent {
    /**
     * The type of the event.
     */
    readonly type: 'TURRET_PLATE_DESTROYED';
    /**
     * The ID of the participant that destroyed the turret plating.
     */
    readonly killerId: number;
    /**
     * The position at which the turret plating was destroyed.
     */
    readonly position: Position;
    /**
     * The lane of the turret plating that was destroyed.
     */
    readonly laneType: string;
    /**
     * The ID of the team that destroyed the turret plating.
     */
    readonly teamId: 100 | 200;
    /**
     * Create a new turret plating destroyed event.
     * @param data - The raw data of the event.
     */
    constructor(data: TurretPlateDestroyedEventData);
    /**
     * The team that destroyed the turret plating.
     */
    get team(): "red" | "blue";
}
/**
 * A representation of the Elite monster kill event.
 */
export declare class EliteMonsterKillEvent extends TimelineEvent {
    /**
     * The type of the event.
     */
    readonly type: 'ELITE_MONSTER_KILL';
    /**
     * The IDs of the participants that assisted in the kill.
     */
    readonly assistingParticipants: number[];
    /**
     * The amount of bounty earned by the killing team (objective bounty).
     */
    readonly bounty: number;
    /**
     * The ID of the participant that landed the killing blow.
     */
    readonly killerId: number;
    /**
     * The ID of the team that killed the monster.
     */
    readonly killerTeamId: number;
    /**
     * The position at which the monster was killed.
     */
    readonly position: Position;
    /**
     * The type of the monster that was killed.
     *
     * Eg: 'DRAGON', 'BARON NASHOR', etc.
     */
    readonly monsterType: string;
    /**
     * The subtype of the monster that was killed.
     *
     * Eg: 'OCEAN', 'CLOUD', etc.
     */
    readonly monsterSubType: string;
    /**
     * Create a new elite monster kill event.
     * @param data - The raw data of the event.
     */
    constructor(data: EliteMonsterKillEventData);
}
/**
 * A representation of the item sold event.
 */
export declare class ItemSoldEvent extends TimelineEvent {
    /**
     * The type of the event.
     */
    readonly type: 'ITEM_SOLD';
    /**
     * The item that was sold.
     */
    readonly item: Item;
    /**
     * The ID of the participant that sold the item.
     */
    readonly participantId: number;
    /**
     * Create a new item sold event.
     * @param data - The raw data of the event.
     * @param item - The item that was sold.
     */
    constructor(data: ItemSoldEventData, item: Item);
}
/**
 * A representation of the objective bounty prestart event.
 */
export declare class ObjectiveBountyPrestartEvent extends TimelineEvent {
    /**
     * The type of the event.
     */
    readonly type: 'OBJECTIVE_BOUNTY_PRESTART';
    /**
     * The timestamp at which the objective bounty will actually start.
     */
    readonly actualStartTime: number;
    /**
     * The ID of the team that is going to get the objective bounty.
     */
    readonly teamId: number;
    /**
     * Create a new objective bounty prestart event.
     * @param data - The raw data of the event.
     */
    constructor(data: ObjectiveBountyPrestartEventData);
}
/**
 * A representation of the building kill event.
 */
export declare class BuildingKillEvent extends TimelineEvent {
    /**
     * The type of the event.
     */
    readonly type: 'BUILDING_KILL';
    /**
     * The IDs of the participants that assisted in destroying the building.
     */
    readonly assistingParticipantIds: number[];
    /**
     * The bounty earned by destroying the building.
     */
    readonly bounty: number;
    /**
     * The type of the building.
     */
    readonly buildingType: string;
    /**
     * The ID of the participant that destroyed the building.
     */
    readonly killerId: number;
    /**
     * The lane where the building was destroyed.
     */
    readonly laneType: string;
    /**
     * The position at which the building was destroyed.
     */
    readonly position: Position;
    /**
     * The ID of the team that destroyed the building.
     */
    readonly teamId: number;
    /**
     * The type of the tower that was destroyed (if it was a tower).
     */
    readonly towerType?: string;
    /**
     * Create a new building kill event.
     * @param data - The raw data of the event.
     */
    constructor(data: BuildingKillEventData);
}
/**
 * A representation of the ward kill event.
 */
export declare class WardKillEvent extends TimelineEvent {
    /**
     * The type of the event.
     */
    readonly type: 'WARD_KILL';
    /**
     * The type of the ward that was killed.
     */
    readonly wardType: string;
    /**
     * The ID of the participant that killed the ward.
     */
    readonly killerId: number;
    /**
     * Create a new ward kill event.
     * @param data - The raw data of the event.
     */
    constructor(data: WardKillEventData);
}
/**
 * A representation of the dragon soul given event.
 */
export declare class DragonSoulGivenEvent {
    /**
     * The type of the event.
     */
    readonly type: 'DRAGON_SOUL_GIVEN';
    /**
     * The name of the dragon soul that was earned.
     */
    readonly name: 'Mountain' | 'Ocean' | 'Infernal' | 'Hextech' | 'Cloud';
    /**
     * The ID of the team that received the dragon soul.
     */
    readonly teamId: 100 | 200;
    /**
     * Create a new dragon soul given event.
     * @param data - The raw data of the event.
     */
    constructor(data: DragonSoulGivenEventData);
    /**
     * The team that received the dragon soul.
     */
    get team(): "red" | "blue";
}
/**
 * A representation of the champion transform event.
 *
 * As of right now, this only applies to Kayn's transformations.
 */
export declare class ChampionTransformEvent extends TimelineEvent {
    /**
     * The type of the event.
     */
    readonly type: 'CHAMPION_TRANSFORM';
    /**
     * The ID of the participant that transformed.
     */
    readonly participantId: number;
    /**
     * The new form that the participant took.
     */
    readonly transformType: 'ASSASSIN' | 'SLAYER';
    /**
     * Create a new champion transform event.
     * @param data - The raw data of the event.
     */
    constructor(data: ChampionTransformEventData);
}
/**
 * A representation of the game end event.
 */
export declare class GameEndEvent extends TimelineEvent {
    /**
     * The type of the event.
     */
    readonly type: 'GAME_END';
    /**
     * The ID of the game.
     */
    readonly gameId: number;
    /**
     * The real world timestamp at which the game ended.
     */
    readonly realTimestamp: number;
    /**
     * The ID of the winning team.
     */
    readonly winningTeamId: 100 | 200;
    /**
     * Create a new game end event.
     * @param data - The raw data of the event.
     */
    constructor(data: GameEndEventData);
    /**
     * The winning team.
     */
    get winningTeam(): "red" | "blue";
    /**
     * The real time at which the game ended.
     */
    get realTime(): Date;
}
/**
 * The timeline event factory - to create a timeline event from a raw data object.
 */
export declare class TimelineEventFactory {
    /**
     * Creates a timeline event from the given data.
     * @param data - The raw data.
     * @param items - A collection of all items.
     */
    static create(data: TimelineEventData, items: Collection<string, Item>): TimelineEvent;
}
//# sourceMappingURL=TimelineEvent.d.ts.map