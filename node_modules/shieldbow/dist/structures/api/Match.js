"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Match = void 0;
const collection_1 = require("@discordjs/collection");
const Team_1 = require("./Team");
/**
 * A representation of a league of legends match.
 */
class Match {
    /**
     * Creates a new match instance.
     * @param client - The client requesting the data.
     * @param data - The raw match data from the API.
     * @param champions - The champions involved in the match.
     * @param items - The items used in the match.
     * @param runeTrees - The rune trees in the game.
     * @param summonerSpells - The summoner spells in the game.
     */
    constructor(client, data, champions, items, runeTrees, summonerSpells) {
        /**
         * The match ID.
         */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The data version of the match.
         */
        Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The timestamp of creation of the match (before summoners spawn on the rift).
         */
        Object.defineProperty(this, "createdTimestamp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The timestamp of the beginning of the match (when summoners spawn on the rift).
         */
        Object.defineProperty(this, "startTimestamp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The duration of the match (in seconds).
         */
        Object.defineProperty(this, "duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The timestamp of the end of the match.
         */
        Object.defineProperty(this, "endTimestamp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the game.
         */
        Object.defineProperty(this, "gameId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The game mode for the match.
         */
        Object.defineProperty(this, "gameMode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The name of the match.
         */
        Object.defineProperty(this, "gameName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The type of game.
         */
        Object.defineProperty(this, "gameType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The version of the game.
         */
        Object.defineProperty(this, "gameVersion", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The map on which the match was played.
         */
        Object.defineProperty(this, "map", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The region in which the match was played.
         *
         * Eg: `NA` or `EUW`.
         */
        Object.defineProperty(this, "region", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The queue type of the match.
         */
        Object.defineProperty(this, "queue", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The tournament code of the match (if it is the part of a tournament).
         */
        Object.defineProperty(this, "tournamentCode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The 2 teams participating in the match.
         *
         * They are mapped by their map sides (`blue` and `red`).
         */
        Object.defineProperty(this, "teams", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        if (this._isDataMalformed(data))
            throw new Error('Match data received is malformed.');
        this.client = client;
        this.id = data.metadata.matchId;
        this.version = data.metadata.dataVersion;
        this.createdTimestamp = data.info.gameCreation;
        this.startTimestamp = data.info.gameStartTimestamp;
        this.duration = data.info.gameDuration;
        this.endTimestamp = data.info.gameEndTimestamp;
        this.gameId = data.info.gameId;
        this.gameMode = client.gameModes.find((m) => m.gameMode === data.info.gameMode);
        this.gameName = data.info.gameName;
        this.gameType = client.gameTypes.find((t) => t.gametype === data.info.gameType);
        this.gameVersion = data.info.gameVersion;
        this.map = client.maps.find((m) => m.mapId === data.info.mapId);
        this.region = this._regionFromPlatformId(data.info.platformId);
        this.queue = client.queues.find((q) => q.queueId === data.info.queueId);
        this.tournamentCode = data.info.tournamentCode;
        const blueTeamData = data.info.teams.find((t) => t.teamId === 100);
        const redTeamData = data.info.teams.find((t) => t.teamId === 200);
        const blueTeamParticipants = data.info.participants.filter((p) => p.teamId === 100);
        const redTeamParticipants = data.info.participants.filter((p) => p.teamId === 200);
        this.teams = new collection_1.Collection();
        this.teams.set('blue', new Team_1.Team(blueTeamData, blueTeamParticipants, champions, items, runeTrees, summonerSpells));
        this.teams.set('red', new Team_1.Team(redTeamData, redTeamParticipants, champions, items, runeTrees, summonerSpells));
    }
    /**
     * Fetch the timeline of the match.
     */
    fetchTimeline() {
        return this.client.matches.fetchMatchTimeline(this.id, { region: this.region });
    }
    /**
     * Checks received match data for traits of a bugged match.
     * @param data - The raw match data from the API.
     */
    _isDataMalformed(data) {
        if (data.info.gameCreation === 0)
            return true;
        if (data.info.gameDuration === 0)
            return true;
        if (data.info.gameMode.length === 0)
            return true;
        if (data.info.gameName.length === 0)
            return true;
        if (data.info.gameType.length === 0)
            return true;
        if (data.info.gameVersion.length === 0)
            return true;
        if (data.info.participants.length === 0)
            return true;
        return data.info.teams.length === 0;
    }
    _regionFromPlatformId(platformId) {
        switch (platformId) {
            case 'BR1':
                return 'br';
            case 'EUN1':
                return 'eune';
            case 'EUW1':
                return 'euw';
            case 'JP1':
                return 'jp';
            case 'KR':
                return 'kr';
            case 'LA1':
                return 'lan';
            case 'LA2':
                return 'las';
            case 'OC1':
                return 'oce';
            case 'TR1':
                return 'tr';
            case 'RU':
                return 'ru';
            default:
                return 'na';
        }
    }
}
exports.Match = Match;
//# sourceMappingURL=Match.js.map