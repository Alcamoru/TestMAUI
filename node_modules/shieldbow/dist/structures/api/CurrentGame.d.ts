import type { Client } from '../../client';
import type { CurrentGameData, GameMap, GameMode, GameType, Queue } from '../../types';
import { Collection } from '@discordjs/collection';
import { CurrentGameTeam } from './CurrentGameTeam';
import type { Champion, RuneTree, SummonerSpell } from '../dragon';
/**
 * A representation of an ongoing game.
 */
export declare class CurrentGame {
    /**
     * The numerical ID of the game.
     *
     * Combining this with the {@link CurrentGame.platform} gives the full ID of the game.
     * The full ID can be used to fetch all the details of the match after it has ended using {@link MatchManager.fetch}.
     */
    readonly id: number;
    /**
     * The type of game.
     */
    readonly type: GameType;
    /**
     * The time at which the game started.
     */
    readonly startTimestamp: number;
    /**
     * The map on which the game is being played.
     */
    readonly map: GameMap;
    /**
     * The amount of time (in seconds) that has passed since the game started.
     */
    readonly length: number;
    /**
     * The platform (server) on which the game is being played.
     */
    readonly platform: string;
    /**
     * The game mode.
     */
    readonly mode: GameMode;
    /**
     * The type of queue for the game.
     */
    readonly queue: Queue;
    /**
     * A collection of the participating teams.
     */
    readonly teams: Collection<'red' | 'blue', CurrentGameTeam>;
    /**
     * The observer key for the game.
     */
    readonly observerKey: string;
    /**
     * Create a new Current Game instance.
     * @param client - The client that requested this data.
     * @param data - The raw current game data from the API.
     * @param champions - The champions that are involved in the game.
     * @param runeTrees - The collection of the runes in the game.
     * @param summonerSpells - The collection of the summoner spells in the game.
     */
    constructor(client: Client, data: CurrentGameData, champions: Collection<string, Champion>, runeTrees: Collection<string, RuneTree>, summonerSpells: Collection<string, SummonerSpell>);
    /**
     * The match ID for fetching the match details after the game is over.
     */
    get matchId(): string;
}
//# sourceMappingURL=CurrentGame.d.ts.map