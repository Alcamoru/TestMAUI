"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimelineEventFactory = exports.GameEndEvent = exports.ChampionTransformEvent = exports.DragonSoulGivenEvent = exports.WardKillEvent = exports.BuildingKillEvent = exports.ObjectiveBountyPrestartEvent = exports.ItemSoldEvent = exports.EliteMonsterKillEvent = exports.TurretPlateDestroyedEvent = exports.ChampionSpecialKillEvent = exports.ChampionKillEvent = exports.LevelUpEvent = exports.ItemDestroyedEvent = exports.WardPlacedEvent = exports.ItemUndoEvent = exports.ItemPurchasedEvent = exports.SkillLevelUpEvent = exports.PauseEndEvent = exports.TimelineEvent = void 0;
const Position_1 = require("../Position");
const Bounty_1 = require("./Bounty");
/**
 * A representation of an event in a match timeline.
 */
class TimelineEvent {
    /**
     * Create a new timeline event.
     * @param data - The raw data of the event.
     */
    constructor(data) {
        /**
         * The timestamp (in milliseconds) of the event since the start of the game.
         */
        Object.defineProperty(this, "timestamp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The type of event.
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The raw data of this event - in case the event is not defined in the library.
         *
         * If you ever encounter an event where you need to access this, please create a GitHub issue as well
         * with the event type and the raw data at https://github.com/TheDrone7/shieldbow/issues.
         */
        Object.defineProperty(this, "rawData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.timestamp = data.timestamp;
        this.type = data.type;
        this.rawData = data;
    }
}
exports.TimelineEvent = TimelineEvent;
/**
 * A representation of the Pause end event.
 *
 * Takes place when a game pause ends or when the game first begins after the loading screen.
 */
class PauseEndEvent extends TimelineEvent {
    /**
     * Create a new pause end event.
     * @param data - The raw data of the event.
     */
    constructor(data) {
        super(data);
        /**
         * The type of the event;
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The real timestamp - the actual time when this pause ended.
         */
        Object.defineProperty(this, "realTimestamp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = 'PAUSE_END';
        this.realTimestamp = data.realTimestamp;
    }
    /**
     * The real time when the pause ended.
     */
    get realTime() {
        return new Date(this.realTimestamp);
    }
}
exports.PauseEndEvent = PauseEndEvent;
/**
 * A representation of the Skill Level Up event.
 */
class SkillLevelUpEvent extends TimelineEvent {
    /**
     * Create a new skill level up event.
     * @param data - The raw data of the event.
     */
    constructor(data) {
        super(data);
        /**
         * The type of the event.
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The type of the level up - usually 'NORMAL'.
         */
        Object.defineProperty(this, "levelUpType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The participant ID of the participant who leveled up.
         */
        Object.defineProperty(this, "participantId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The skill slot that was leveled up - 1/2/3/4.
         */
        Object.defineProperty(this, "skillSlot", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = 'SKILL_LEVEL_UP';
        this.levelUpType = data.levelUpType;
        this.participantId = data.participantId;
        this.skillSlot = data.skillSlot;
    }
    /**
     * The skill slot that was leveled up - Q/W/E/R.
     */
    get skillSlotLetter() {
        const slots = ['Q', 'W', 'E', 'R'];
        return slots[this.skillSlot - 1];
    }
    /**
     * Whether the leveled up skill was the ultimate skill of the champion.
     */
    get isUltimate() {
        return this.skillSlot === 4;
    }
}
exports.SkillLevelUpEvent = SkillLevelUpEvent;
/**
 * A representation of the Item Purchased event.
 */
class ItemPurchasedEvent extends TimelineEvent {
    /**
     * Create a new item purchased event.
     * @param data - The raw data of the event.
     * @param item - The item that was purchased.
     */
    constructor(data, item) {
        super(data);
        /**
         * The type of the event.
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The item that was purchased.
         */
        Object.defineProperty(this, "item", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The participant who purchased the item.
         */
        Object.defineProperty(this, "participantId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = 'ITEM_PURCHASED';
        this.item = item;
        this.participantId = data.participantId;
    }
}
exports.ItemPurchasedEvent = ItemPurchasedEvent;
/**
 * A representation of the Item Undo event.
 */
class ItemUndoEvent extends TimelineEvent {
    /**
     * Create a new item undo event.
     * @param data - The raw data of the event.
     * @param after - The item in the item slot after the undo (might be nothing).
     * @param before - The item in the item slot before the undo.
     */
    constructor(data, after, before) {
        super(data);
        /**
         * The type of the event.
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The item in the item slot after the undo (might be nothing).
         */
        Object.defineProperty(this, "after", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The item in the item slot before the undo.
         */
        Object.defineProperty(this, "before", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of gold that was gained by the undo.
         */
        Object.defineProperty(this, "goldGain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The participant who undid the item.
         */
        Object.defineProperty(this, "participantId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = 'ITEM_UNDO';
        this.after = after;
        this.before = before;
        this.goldGain = data.goldGain;
        this.participantId = data.participantId;
    }
}
exports.ItemUndoEvent = ItemUndoEvent;
/**
 * A representation of the Ward Placed event.
 */
class WardPlacedEvent extends TimelineEvent {
    /**
     * Create a new ward placed event.
     * @param data - The raw data of the event.
     */
    constructor(data) {
        super(data);
        /**
         * The type of the event.
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the participant who placed the ward.
         */
        Object.defineProperty(this, "creatorId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The type of the ward that was placed.
         */
        Object.defineProperty(this, "wardType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = 'WARD_PLACED';
        this.creatorId = data.creatorId;
        this.wardType = data.wardType;
    }
}
exports.WardPlacedEvent = WardPlacedEvent;
/**
 * A representation of the Item destroyed event.
 */
class ItemDestroyedEvent extends TimelineEvent {
    /**
     * Create a new item destroyed event.
     * @param data - The raw data of the event.
     * @param item - The destroyed item.
     */
    constructor(data, item) {
        super(data);
        /**
         * The type of the event.
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The destroyed item.
         */
        Object.defineProperty(this, "item", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the participant that destroyed the item.
         */
        Object.defineProperty(this, "participantId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = 'ITEM_DESTROYED';
        this.item = item;
        this.participantId = data.participantId;
    }
}
exports.ItemDestroyedEvent = ItemDestroyedEvent;
/**
 * A representation of the Level up event.
 */
class LevelUpEvent extends TimelineEvent {
    /**
     * Create a new level up event.
     * @param data - The raw data of the event.
     */
    constructor(data) {
        super(data);
        /**
         * The type of the event.
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the participant who leveled up.
         */
        Object.defineProperty(this, "participantId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The level the participant reached.
         */
        Object.defineProperty(this, "level", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = 'LEVEL_UP';
        this.participantId = data.participantId;
        this.level = data.level;
    }
}
exports.LevelUpEvent = LevelUpEvent;
/**
 * The representation of the Champion Kill event.
 */
class ChampionKillEvent extends TimelineEvent {
    /**
     * Create a new champion kill event.
     * @param data - The raw data of the event.
     */
    constructor(data) {
        super(data);
        /**
         * The participants who assisted in the kill.
         */
        Object.defineProperty(this, "assistingParticipantIds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The bounty achieved by the killer.
         */
        Object.defineProperty(this, "bounty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The kill streak length of the killer.
         */
        Object.defineProperty(this, "killStreakLength", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the participant who landed the killing blow.
         */
        Object.defineProperty(this, "killerId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The position at which the kill took place.
         */
        Object.defineProperty(this, "position", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The damage dealt by the victim.
         */
        Object.defineProperty(this, "victimDamageDealt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The damage dealt to the victim.
         */
        Object.defineProperty(this, "victimDamageReceived", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the participant that died.
         */
        Object.defineProperty(this, "victimId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The bounty earned by the killer.
         */
        Object.defineProperty(this, "shutdownBounty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The type of the event.
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = 'CHAMPION_KILL';
        this.killerId = data.killerId;
        this.victimId = data.victimId;
        this.assistingParticipantIds = data.assistingParticipantIds || [];
        this.bounty = new Bounty_1.Bounty(data.bountyLevel);
        this.killStreakLength = data.killStreakLength;
        this.position = new Position_1.Position(data.position);
        this.victimDamageDealt = data.victimDamageDealt || [];
        this.victimDamageReceived = data.victimDamageReceived || [];
        this.shutdownBounty = data.shutdownBounty;
    }
}
exports.ChampionKillEvent = ChampionKillEvent;
/**
 * A representation of the Champion special kill event.
 */
class ChampionSpecialKillEvent extends TimelineEvent {
    /**
     * Create a new champion special kill event.
     * @param data - The raw data of the event.
     */
    constructor(data) {
        super(data);
        /**
         * The ID of the participant that performed the special kill.
         */
        Object.defineProperty(this, "killerId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The position at which the special kill took place.
         */
        Object.defineProperty(this, "position", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The type of the special kill.
         */
        Object.defineProperty(this, "killType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The type of the event.
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = 'CHAMPION_SPECIAL_KILL';
        this.killerId = data.killerId;
        this.killType = data.killType;
        this.position = new Position_1.Position(data.position);
    }
}
exports.ChampionSpecialKillEvent = ChampionSpecialKillEvent;
/**
 * A representation of the Turret place destroyed event.
 */
class TurretPlateDestroyedEvent extends TimelineEvent {
    /**
     * Create a new turret plating destroyed event.
     * @param data - The raw data of the event.
     */
    constructor(data) {
        super(data);
        /**
         * The type of the event.
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the participant that destroyed the turret plating.
         */
        Object.defineProperty(this, "killerId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The position at which the turret plating was destroyed.
         */
        Object.defineProperty(this, "position", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The lane of the turret plating that was destroyed.
         */
        Object.defineProperty(this, "laneType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the team that destroyed the turret plating.
         */
        Object.defineProperty(this, "teamId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = 'TURRET_PLATE_DESTROYED';
        this.killerId = data.killerId;
        this.position = new Position_1.Position(data.position);
        this.laneType = data.laneType;
        this.teamId = data.teamId;
    }
    /**
     * The team that destroyed the turret plating.
     */
    get team() {
        return this.teamId === 100 ? 'blue' : 'red';
    }
}
exports.TurretPlateDestroyedEvent = TurretPlateDestroyedEvent;
/**
 * A representation of the Elite monster kill event.
 */
class EliteMonsterKillEvent extends TimelineEvent {
    /**
     * Create a new elite monster kill event.
     * @param data - The raw data of the event.
     */
    constructor(data) {
        super(data);
        /**
         * The type of the event.
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The IDs of the participants that assisted in the kill.
         */
        Object.defineProperty(this, "assistingParticipants", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of bounty earned by the killing team (objective bounty).
         */
        Object.defineProperty(this, "bounty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the participant that landed the killing blow.
         */
        Object.defineProperty(this, "killerId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the team that killed the monster.
         */
        Object.defineProperty(this, "killerTeamId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The position at which the monster was killed.
         */
        Object.defineProperty(this, "position", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The type of the monster that was killed.
         *
         * Eg: 'DRAGON', 'BARON NASHOR', etc.
         */
        Object.defineProperty(this, "monsterType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The subtype of the monster that was killed.
         *
         * Eg: 'OCEAN', 'CLOUD', etc.
         */
        Object.defineProperty(this, "monsterSubType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = 'ELITE_MONSTER_KILL';
        this.assistingParticipants = data.assistingParticipantIds;
        this.bounty = data.bounty;
        this.killerTeamId = data.killerTeamId;
        this.killerId = data.killerId;
        this.position = new Position_1.Position(data.position);
        this.monsterType = data.monsterType;
        this.monsterSubType = data.monsterSubType;
    }
}
exports.EliteMonsterKillEvent = EliteMonsterKillEvent;
/**
 * A representation of the item sold event.
 */
class ItemSoldEvent extends TimelineEvent {
    /**
     * Create a new item sold event.
     * @param data - The raw data of the event.
     * @param item - The item that was sold.
     */
    constructor(data, item) {
        super(data);
        /**
         * The type of the event.
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The item that was sold.
         */
        Object.defineProperty(this, "item", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the participant that sold the item.
         */
        Object.defineProperty(this, "participantId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = 'ITEM_SOLD';
        this.item = item;
        this.participantId = data.participantId;
    }
}
exports.ItemSoldEvent = ItemSoldEvent;
/**
 * A representation of the objective bounty prestart event.
 */
class ObjectiveBountyPrestartEvent extends TimelineEvent {
    /**
     * Create a new objective bounty prestart event.
     * @param data - The raw data of the event.
     */
    constructor(data) {
        super(data);
        /**
         * The type of the event.
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The timestamp at which the objective bounty will actually start.
         */
        Object.defineProperty(this, "actualStartTime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the team that is going to get the objective bounty.
         */
        Object.defineProperty(this, "teamId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = 'OBJECTIVE_BOUNTY_PRESTART';
        this.actualStartTime = data.actualStartTime;
        this.teamId = data.teamId;
    }
}
exports.ObjectiveBountyPrestartEvent = ObjectiveBountyPrestartEvent;
/**
 * A representation of the building kill event.
 */
class BuildingKillEvent extends TimelineEvent {
    /**
     * Create a new building kill event.
     * @param data - The raw data of the event.
     */
    constructor(data) {
        super(data);
        /**
         * The type of the event.
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The IDs of the participants that assisted in destroying the building.
         */
        Object.defineProperty(this, "assistingParticipantIds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The bounty earned by destroying the building.
         */
        Object.defineProperty(this, "bounty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The type of the building.
         */
        Object.defineProperty(this, "buildingType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the participant that destroyed the building.
         */
        Object.defineProperty(this, "killerId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The lane where the building was destroyed.
         */
        Object.defineProperty(this, "laneType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The position at which the building was destroyed.
         */
        Object.defineProperty(this, "position", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the team that destroyed the building.
         */
        Object.defineProperty(this, "teamId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The type of the tower that was destroyed (if it was a tower).
         */
        Object.defineProperty(this, "towerType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = 'BUILDING_KILL';
        this.assistingParticipantIds = data.assistingParticipantIds || [];
        this.buildingType = data.buildingType;
        this.bounty = data.bounty;
        this.killerId = data.killerId;
        this.laneType = data.laneType;
        this.teamId = data.teamId;
        this.position = new Position_1.Position(data.position);
        this.towerType = data.towerType;
    }
}
exports.BuildingKillEvent = BuildingKillEvent;
/**
 * A representation of the ward kill event.
 */
class WardKillEvent extends TimelineEvent {
    /**
     * Create a new ward kill event.
     * @param data - The raw data of the event.
     */
    constructor(data) {
        super(data);
        /**
         * The type of the event.
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The type of the ward that was killed.
         */
        Object.defineProperty(this, "wardType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the participant that killed the ward.
         */
        Object.defineProperty(this, "killerId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = 'WARD_KILL';
        this.wardType = data.wardType;
        this.killerId = data.killerId;
    }
}
exports.WardKillEvent = WardKillEvent;
/**
 * A representation of the dragon soul given event.
 */
class DragonSoulGivenEvent {
    /**
     * Create a new dragon soul given event.
     * @param data - The raw data of the event.
     */
    constructor(data) {
        /**
         * The type of the event.
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The name of the dragon soul that was earned.
         */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the team that received the dragon soul.
         */
        Object.defineProperty(this, "teamId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = 'DRAGON_SOUL_GIVEN';
        this.name = data.name;
        this.teamId = data.teamId;
    }
    /**
     * The team that received the dragon soul.
     */
    get team() {
        return this.teamId === 100 ? 'blue' : 'red';
    }
}
exports.DragonSoulGivenEvent = DragonSoulGivenEvent;
/**
 * A representation of the champion transform event.
 *
 * As of right now, this only applies to Kayn's transformations.
 */
class ChampionTransformEvent extends TimelineEvent {
    /**
     * Create a new champion transform event.
     * @param data - The raw data of the event.
     */
    constructor(data) {
        super(data);
        /**
         * The type of the event.
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the participant that transformed.
         */
        Object.defineProperty(this, "participantId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The new form that the participant took.
         */
        Object.defineProperty(this, "transformType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = 'CHAMPION_TRANSFORM';
        this.participantId = data.participantId;
        this.transformType = data.transformType;
    }
}
exports.ChampionTransformEvent = ChampionTransformEvent;
/**
 * A representation of the game end event.
 */
class GameEndEvent extends TimelineEvent {
    /**
     * Create a new game end event.
     * @param data - The raw data of the event.
     */
    constructor(data) {
        super(data);
        /**
         * The type of the event.
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the game.
         */
        Object.defineProperty(this, "gameId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The real world timestamp at which the game ended.
         */
        Object.defineProperty(this, "realTimestamp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the winning team.
         */
        Object.defineProperty(this, "winningTeamId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = 'GAME_END';
        this.gameId = data.gameId;
        this.realTimestamp = data.realTimestamp;
        this.winningTeamId = data.winningTeam;
    }
    /**
     * The winning team.
     */
    get winningTeam() {
        return this.winningTeamId === 100 ? 'blue' : 'red';
    }
    /**
     * The real time at which the game ended.
     */
    get realTime() {
        return new Date(this.realTimestamp);
    }
}
exports.GameEndEvent = GameEndEvent;
/**
 * The timeline event factory - to create a timeline event from a raw data object.
 */
class TimelineEventFactory {
    /**
     * Creates a timeline event from the given data.
     * @param data - The raw data.
     * @param items - A collection of all items.
     */
    static create(data, items) {
        let details;
        switch (data.type) {
            case 'PAUSE_END':
                return new PauseEndEvent(data);
            case 'SKILL_LEVEL_UP':
                return new SkillLevelUpEvent(data);
            case 'ITEM_PURCHASED':
                details = data;
                return new ItemPurchasedEvent(details, items.get(details.itemId.toString()));
            case 'ITEM_UNDO':
                details = data;
                return new ItemUndoEvent(details, items.get(details.afterId.toString()), items.get(details.beforeId.toString()));
            case 'WARD_PLACED':
                return new WardPlacedEvent(data);
            case 'ITEM_DESTROYED':
                details = data;
                return new ItemDestroyedEvent(details, items.get(details.itemId.toString()));
            case 'LEVEL_UP':
                return new LevelUpEvent(data);
            case 'CHAMPION_KILL':
                return new ChampionKillEvent(data);
            case 'CHAMPION_SPECIAL_KILL':
                return new ChampionSpecialKillEvent(data);
            case 'TURRET_PLATE_DESTROYED':
                return new TurretPlateDestroyedEvent(data);
            case 'ELITE_MONSTER_KILL':
                return new EliteMonsterKillEvent(data);
            case 'ITEM_SOLD':
                details = data;
                return new ItemSoldEvent(details, items.get(details.itemId.toString()));
            case 'OBJECTIVE_BOUNTY_PRESTART':
                return new ObjectiveBountyPrestartEvent(data);
            case 'BUILDING_KILL':
                return new BuildingKillEvent(data);
            case 'WARD_KILL':
                return new WardKillEvent(data);
            case 'GAME_END':
                return new GameEndEvent(data);
            default:
                return new TimelineEvent(data);
        }
    }
}
exports.TimelineEventFactory = TimelineEventFactory;
//# sourceMappingURL=TimelineEvent.js.map