"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParticipantFrame = exports.ParticipantFrameDamageStats = exports.ParticipantFrameChampionStats = void 0;
const Position_1 = require("../Position");
/**
 * A representation of the participant's champion stats in a {@link ParticipantFrame}.
 */
class ParticipantFrameChampionStats {
    /**
     * Create a new participant frame champion stats instance.
     * @param data - The raw data from the API.
     */
    constructor(data) {
        /**
         * The amount of ability haste the participant has.
         *
         * This scales linearly.
         */
        Object.defineProperty(this, "abilityHaste", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of ability power the participant has.
         */
        Object.defineProperty(this, "abilityPower", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of armor the participant has.
         */
        Object.defineProperty(this, "armor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of flat armor penetration the participant has.
         *
         * Also called "lethality" in the game.
         */
        Object.defineProperty(this, "armorPen", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of percent armor penetration the participant has.
         */
        Object.defineProperty(this, "armorPenPercent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of attack damage the participant has.
         */
        Object.defineProperty(this, "attackDamage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of attack speed the participant has.
         */
        Object.defineProperty(this, "attackSpeed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of bonus percent armor penetration the participant has.
         */
        Object.defineProperty(this, "bonusArmorPenPercent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of bonus percent magic penetration the participant has.
         */
        Object.defineProperty(this, "bonusMagicPenPercent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of tenacity the participant has.
         */
        Object.defineProperty(this, "tenacity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of cooldown reduction the participant has.
         *
         * This scales exponentially.
         */
        Object.defineProperty(this, "cooldownReduction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of HP the participant currently has (current health).
         */
        Object.defineProperty(this, "health", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The maximum amount of HP the participant can have (max HP).
         */
        Object.defineProperty(this, "healthMax", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of HP the participant recovers each second.
         */
        Object.defineProperty(this, "healthRegen", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of lifesteal the participant has.
         */
        Object.defineProperty(this, "lifesteal", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of flat magic penetration the participant has.
         */
        Object.defineProperty(this, "magicPen", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of percent magic penetration the participant has.
         */
        Object.defineProperty(this, "magicPenPercent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of magic resist the participant has.
         */
        Object.defineProperty(this, "magicResist", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The participant's movement speed.
         */
        Object.defineProperty(this, "movementSpeed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of omnivamp the participant has.
         */
        Object.defineProperty(this, "omnivamp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of physical vamp the participant has.
         */
        Object.defineProperty(this, "physicalVamp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of power the participant currently has.
         *
         * Power refers to mostly mana or energy.
         */
        Object.defineProperty(this, "power", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The max amount of power the participant can have.
         *
         * Power refers to mostly mana or energy.
         */
        Object.defineProperty(this, "powerMax", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of power the participant regenerates each second.
         *
         * Power refers to mostly mana or energy.
         */
        Object.defineProperty(this, "powerRegen", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of spell vamp the participant has.
         */
        Object.defineProperty(this, "spellVamp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.abilityHaste = data.abilityHaste;
        this.abilityPower = data.abilityPower;
        this.armor = data.armor;
        this.armorPen = data.armorPen;
        this.armorPenPercent = data.armorPenPercent;
        this.attackDamage = data.attackDamage;
        this.attackSpeed = data.attackSpeed;
        this.bonusArmorPenPercent = data.bonusArmorPenPercent;
        this.bonusMagicPenPercent = data.bonusMagicPenPercent;
        this.tenacity = data.ccReduction;
        this.cooldownReduction = data.cooldownReduction;
        this.health = data.health;
        this.healthMax = data.healthMax;
        this.healthRegen = data.healthRegen;
        this.lifesteal = data.lifesteal;
        this.magicPen = data.magicPen;
        this.magicPenPercent = data.magicPenPercent;
        this.magicResist = data.magicResist;
        this.movementSpeed = data.movementSpeed;
        this.omnivamp = data.omnivamp;
        this.physicalVamp = data.physicalVamp;
        this.power = data.power;
        this.powerMax = data.powerMax;
        this.powerRegen = data.powerRegen;
        this.spellVamp = data.spellVamp;
    }
}
exports.ParticipantFrameChampionStats = ParticipantFrameChampionStats;
/**
 * A representation of the participant's damage stats in a {@link ParticipantFrame}.
 */
class ParticipantFrameDamageStats {
    /**
     * Create a new participant frame damage stats instance.
     * @param data - The raw data from the API.
     */
    constructor(data) {
        /**
         * The total amount of magic damage the participant dealt.
         */
        Object.defineProperty(this, "magicDamageDealt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The total amount of magic damage the participant dealt to enemy champions.
         */
        Object.defineProperty(this, "magicDamageDealtToChampions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The total amount of magic damage the participant took from the enemy.
         */
        Object.defineProperty(this, "magicDamageTaken", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The total amount of physical damage the participant dealt.
         */
        Object.defineProperty(this, "physicalDamageDealt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The total amount of physical damage the participant dealt to enemy champions.
         */
        Object.defineProperty(this, "physicalDamageDealtToChampions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The total amount of physical damage the participant took from the enemy.
         */
        Object.defineProperty(this, "physicalDamageTaken", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The total amount of true damage the participant dealt.
         */
        Object.defineProperty(this, "trueDamageDealt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The total amount of true damage the participant dealt to enemy champions.
         */
        Object.defineProperty(this, "trueDamageDealtToChampions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The total amount of true damage the participant took from the enemy.
         */
        Object.defineProperty(this, "trueDamageTaken", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The total amount of damage the participant dealt.
         */
        Object.defineProperty(this, "totalDamageDealt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The total amount of damage the participant dealt to enemy champions.
         */
        Object.defineProperty(this, "totalDamageDealtToChampions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The total amount of damage the participant took from the enemy.
         */
        Object.defineProperty(this, "totalDamageTaken", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.magicDamageDealt = data.magicDamageDone;
        this.magicDamageDealtToChampions = data.magicDamageDoneToChampions;
        this.magicDamageTaken = data.magicDamageTaken;
        this.physicalDamageDealt = data.physicalDamageDone;
        this.physicalDamageDealtToChampions = data.physicalDamageDoneToChampions;
        this.physicalDamageTaken = data.physicalDamageTaken;
        this.trueDamageDealt = data.trueDamageDone;
        this.trueDamageDealtToChampions = data.trueDamageDoneToChampions;
        this.trueDamageTaken = data.trueDamageTaken;
        this.totalDamageDealt = data.totalDamageDone;
        this.totalDamageDealtToChampions = data.totalDamageDoneToChampions;
        this.totalDamageTaken = data.totalDamageTaken;
    }
}
exports.ParticipantFrameDamageStats = ParticipantFrameDamageStats;
/**
 * A representation of a participant's stats at a point in the timeline.
 */
class ParticipantFrame {
    /**
     * Create a new participant frame instance.
     * @param data - The raw data from the API.
     */
    constructor(data) {
        /**
         * The participant's champion stats.
         */
        Object.defineProperty(this, "championStats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of gold the participant currently has.
         */
        Object.defineProperty(this, "currentGold", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The participant's damage stats.
         */
        Object.defineProperty(this, "damageStats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of gold that this participant is getting each second.
         */
        Object.defineProperty(this, "goldPerSecond", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The creep score this participant has accumulated by killing jungle monsters.
         */
        Object.defineProperty(this, "jungleMinionsKilled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The participant's champion's level.
         */
        Object.defineProperty(this, "level", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of lane minions killed by this participant.
         */
        Object.defineProperty(this, "minionsKilled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The total creep score of this participant.
         */
        Object.defineProperty(this, "cs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The participant ID.
         */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The position of this participant on the map.
         */
        Object.defineProperty(this, "position", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The participant's crowd control score.
         */
        Object.defineProperty(this, "timeEnemySpentControlled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The total amount of gold the participant has earned so far.
         */
        Object.defineProperty(this, "totalGold", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of XP the participant has accumulated so far.
         */
        Object.defineProperty(this, "xp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.championStats = new ParticipantFrameChampionStats(data.championStats);
        this.currentGold = data.currentGold;
        this.damageStats = new ParticipantFrameDamageStats(data.damageStats);
        this.goldPerSecond = data.goldPerSecond;
        this.jungleMinionsKilled = data.jungleMinionsKilled;
        this.level = data.level;
        this.minionsKilled = data.minionsKilled;
        this.cs = data.minionsKilled + data.jungleMinionsKilled;
        this.id = data.participantId;
        this.position = new Position_1.Position(data.position);
        this.timeEnemySpentControlled = data.timeEnemySpentControlled;
        this.totalGold = data.totalGold;
        this.xp = data.xp;
    }
}
exports.ParticipantFrame = ParticipantFrame;
//# sourceMappingURL=ParticipantFrame.js.map