"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Perks = exports.PerkStyle = void 0;
const util_1 = require("../../util");
/**
 * A representation of a perk style - a tree and 4 (if primary) or 2 (if secondary) runes that were selected.
 */
class PerkStyle {
    /**
     * Creates a new perk style instance.
     * @param runeTrees - The collection of rune trees in the game.
     * @param data - The raw perk style data from the API.
     */
    constructor(runeTrees, data) {
        /**
         * The rune tree that this perk style is based on.
         */
        Object.defineProperty(this, "tree", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The selected runes.
         */
        Object.defineProperty(this, "selected", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.tree = runeTrees.find((t) => t.id === data.style);
        const runes = runeTrees.map((t) => t.slots.map((r) => [...r.values()])).flat(2);
        this.selected = data.selections.map((s) => runes.find((r) => r.id === s.perk));
    }
}
exports.PerkStyle = PerkStyle;
/**
 * A representation of the perks (runes) selected by a summoner for a match.
 */
class Perks {
    /**
     * Creates a new perks instance.
     * @param runeTrees - The collection of rune trees in the game.
     * @param data - The raw perks data from the API.
     */
    constructor(runeTrees, data) {
        /**
         * The stat runes that were picked by the player.
         */
        Object.defineProperty(this, "stats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The primary perk style (keystone + primary runes).
         */
        Object.defineProperty(this, "primaryStyle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The secondary perk style (secondary runes).
         */
        Object.defineProperty(this, "secondaryStyle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.stats = {
            flex: util_1.rawStatPerks[data.statPerks.flex],
            offense: util_1.rawStatPerks[data.statPerks.offense],
            defense: util_1.rawStatPerks[data.statPerks.defense]
        };
        this.primaryStyle = new PerkStyle(runeTrees, data.styles.find((p) => p.description === 'primaryStyle'));
        this.secondaryStyle = new PerkStyle(runeTrees, data.styles.find((p) => p.description === 'subStyle'));
    }
}
exports.Perks = Perks;
//# sourceMappingURL=Perks.js.map