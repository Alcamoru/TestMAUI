"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Participant = void 0;
const Bounty_1 = require("./Bounty");
const collection_1 = require("@discordjs/collection");
const Perks_1 = require("./Perks");
/**
 * A representation of a participant in a match.
 */
class Participant {
    /**
     * Creates a new participant instance.
     * @param data - The raw participant data from the API.
     * @param champ - The champion played by the participant.
     * @param items - The items purchased by the participant.
     * @param runeTrees - The rune trees in the game.
     * @param summonerSpells - The summoner spells in the game.
     */
    constructor(data, champ, items, runeTrees, summonerSpells) {
        /**
         * The participant ID.
         */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The perks (runes) selected by the participant.
         */
        Object.defineProperty(this, "perks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of times this participant used the basic pings.
         */
        Object.defineProperty(this, "basicPings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of times this participant used the all in pings.
         */
        Object.defineProperty(this, "allInPings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of times this participant used the assist me pings.
         */
        Object.defineProperty(this, "assistMePings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of times this participant used the bait pings.
         */
        Object.defineProperty(this, "baitPings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of times this participant used command pings.
         */
        Object.defineProperty(this, "commandPings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of times this participant used the retreat pings.
         */
        Object.defineProperty(this, "dangerPings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of times this participant used the enemy missing pings.
         */
        Object.defineProperty(this, "enemyMissingPings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of times this participant used the enemy vision pings.
         */
        Object.defineProperty(this, "enemyVisionPings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of times this participant used the caution pings.
         */
        Object.defineProperty(this, "getBackPings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of times this participant used the hold pings.
         */
        Object.defineProperty(this, "holdPings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of times this participant used the need vision pings.
         */
        Object.defineProperty(this, "needVisionPings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of times this participant used the on my way pings.
         */
        Object.defineProperty(this, "onMyWayPings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of times this participant used the push pings.
         */
        Object.defineProperty(this, "pushPings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of times this participant used the vision cleared pings.
         */
        Object.defineProperty(this, "visionClearedPings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of kills scored by this participant.
         */
        Object.defineProperty(this, "kills", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of deaths of the participant.
         */
        Object.defineProperty(this, "deaths", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of kills the participant assisted a teammate with.
         */
        Object.defineProperty(this, "assists", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of times this participant killed the baron nashor.
         */
        Object.defineProperty(this, "baronKills", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of dragons killed by the participant.
         */
        Object.defineProperty(this, "dragonKills", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The bounty on this participant's head.
         */
        Object.defineProperty(this, "bounty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The stats of the champion being played by this participant.
         */
        Object.defineProperty(this, "champion", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of consumable items purchased by the participant.
         */
        Object.defineProperty(this, "consumablesPurchased", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * An overview of the damage dealt/taken/shielded by the participant.
         */
        Object.defineProperty(this, "totalDamage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The vision control stats of the participant.
         */
        Object.defineProperty(this, "vision", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether the participant won the game.
         */
        Object.defineProperty(this, "win", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of multi-kills scored by this participant.
         */
        Object.defineProperty(this, "multiKills", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether the participant was the first to score a kill.
         */
        Object.defineProperty(this, "firstBloodKill", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether the participant assisted in the first kill of the game.
         */
        Object.defineProperty(this, "firstBloodAssist", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether the participant was the first to destroy a turret.
         */
        Object.defineProperty(this, "firstTowerKill", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether the participant assisted in taking down the first turret.
         */
        Object.defineProperty(this, "firstTowerAssist", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether the game ended in early surrender - a remake.
         */
        Object.defineProperty(this, "remake", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether one of the teams surrendered before the match ended.
         */
        Object.defineProperty(this, "surrender", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of gold earned by the participant.
         */
        Object.defineProperty(this, "goldEarned", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of gold spent by the participant.
         */
        Object.defineProperty(this, "goldSpent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The participant's position in the team.
         */
        Object.defineProperty(this, "position", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of turrets destroyed/lost.
         */
        Object.defineProperty(this, "turrets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of inhibitors killed/lost.
         */
        Object.defineProperty(this, "inhibitors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The items in the participant's inventory.
         */
        Object.defineProperty(this, "items", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of items purchased by the participant.
         */
        Object.defineProperty(this, "itemsPurchased", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of times the participant went on a killing spree.
         */
        Object.defineProperty(this, "killingSprees", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The largest killing spree of the participant.
         */
        Object.defineProperty(this, "largestKillingSpree", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The largest multi-kill of the participant.
         */
        Object.defineProperty(this, "largestMultiKill", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The longest time the participant was alive on the rift (in seconds).
         */
        Object.defineProperty(this, "longestTimeSpentLiving", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The largest amount of damage dealt with a critical strike by the participant.
         */
        Object.defineProperty(this, "largestCriticalStrike", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * An overview of the magic damage dealt/taken by the participant.
         */
        Object.defineProperty(this, "magicDamage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * An overview of the physical damage dealt/taken by the participant.
         */
        Object.defineProperty(this, "physicalDamage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether the participant killed the nexus.
         */
        Object.defineProperty(this, "nexusKilled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether the participant's team lost their nexus.
         */
        Object.defineProperty(this, "nexusLost", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether the participant helped to take down the enemy nexus.
         */
        Object.defineProperty(this, "nexusTakedown", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of jungle creeps killed by the participant.
         */
        Object.defineProperty(this, "jungleCampsKilled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of objectives such as dragon or barn nashor stolen by the participant.
         */
        Object.defineProperty(this, "objectivesStolen", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of objectives such as dragon or baron nashor the participant helped to steal.
         */
        Object.defineProperty(this, "objectivesStolenAssists", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The summoner acting as the participant.
         */
        Object.defineProperty(this, "summoner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The summoner spells the participant chose for the match.
         */
        Object.defineProperty(this, "summonerSpells", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of times each of the summoner spells was used.
         */
        Object.defineProperty(this, "summonerSpellsCasts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of time (in seconds) the participant inflicted crowd control on the enemy team.
         */
        Object.defineProperty(this, "crowdControlTime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The CC score earned by the participant.
         */
        Object.defineProperty(this, "crowdControlScore", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of time (in seconds) the participant spent playing the game.
         *
         * If this is lower than the game duration, the participant was AFK for that duration.
         */
        Object.defineProperty(this, "timePlayed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of jungle minions killed in the ally jungle.
         */
        Object.defineProperty(this, "totalAllyJungleMinionsKilled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of jungle minions killed in the enemy jungle.
         */
        Object.defineProperty(this, "totalEnemyJungleMinionsKilled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * An overview of the healing done by the participant.
         */
        Object.defineProperty(this, "healing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of enemy minions killed by the participant.
         */
        Object.defineProperty(this, "minionsKilled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The creep score (CS) of the participant.
         */
        Object.defineProperty(this, "creepScore", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of time (in seconds) the participant stayed alive.
         */
        Object.defineProperty(this, "timeAlive", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of time (in seconds) that the participant stayed dead.
         */
        Object.defineProperty(this, "timeDead", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * An overview of the true damage dealt/taken by the participant.
         */
        Object.defineProperty(this, "trueDamage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The challenges progression data for this participant.
         */
        Object.defineProperty(this, "challenges", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = data.participantId;
        this.perks = new Perks_1.Perks(runeTrees, data.perks);
        this.challenges = data.challenges;
        this.basicPings = data.basicPings;
        this.allInPings = data.allInPings;
        this.assistMePings = data.assistMePings;
        this.baitPings = data.baitPings;
        this.commandPings = data.commandPings;
        this.dangerPings = data.dangerPings;
        this.enemyMissingPings = data.enemyMissingPings;
        this.enemyVisionPings = data.enemyVisionPings;
        this.getBackPings = data.getBackPings;
        this.holdPings = data.holdPings;
        this.needVisionPings = data.needVisionPings;
        this.onMyWayPings = data.onMyWayPings;
        this.pushPings = data.pushPings;
        this.visionClearedPings = data.visionClearedPings;
        this.kills = data.kills;
        this.deaths = data.deaths;
        this.assists = data.assists;
        this.bounty = new Bounty_1.Bounty(data.bountyLevel);
        this.champion = {
            key: data.championId,
            id: data.championName,
            champ,
            level: data.champLevel,
            xp: data.champExperience,
            form: data.championTransform,
            abilitiesCasted: new collection_1.Collection()
        };
        this.champion.abilitiesCasted.set('Q', data.spell1Casts);
        this.champion.abilitiesCasted.set('W', data.spell2Casts);
        this.champion.abilitiesCasted.set('E', data.spell3Casts);
        this.champion.abilitiesCasted.set('R', data.spell4Casts);
        this.consumablesPurchased = data.consumablesPurchased;
        this.win = data.win;
        this.firstBloodKill = data.firstBloodKill;
        this.firstBloodAssist = data.firstBloodAssist;
        this.firstTowerKill = data.firstTowerKill;
        this.firstTowerAssist = data.firstTowerAssist;
        this.vision = {
            controlWardsBought: data.visionWardsBoughtInGame,
            sightWardsBought: data.sightWardsBoughtInGame,
            controlWardsUsed: data.detectorWardsPlaced,
            score: data.visionScore,
            wardsPlaced: data.wardsPlaced,
            wardsKilled: data.wardsKilled
        };
        this.multiKills = {
            doubleKills: data.doubleKills,
            tripleKills: data.tripleKills,
            quadraKills: data.quadraKills,
            pentaKills: data.pentaKills,
            unrealKills: data.unrealKills
        };
        this.totalDamage = {
            dealt: data.totalDamageDealt,
            taken: data.totalDamageTaken,
            shielded: data.totalDamageShieldedOnTeammates,
            toChampions: data.totalDamageDealtToChampions,
            toBuildings: data.damageDealtToBuildings,
            toObjectives: data.damageDealtToObjectives,
            toTurrets: data.damageDealtToTurrets,
            mitigated: data.damageSelfMitigated
        };
        this.totalAllyJungleMinionsKilled = data.totalAllyJungleMinionsKilled;
        this.totalEnemyJungleMinionsKilled = data.totalEnemyJungleMinionsKilled;
        this.magicDamage = {
            dealt: data.magicDamageDealt,
            taken: data.magicDamageTaken,
            toChampions: data.magicDamageDealtToChampions
        };
        this.physicalDamage = {
            dealt: data.physicalDamageDealt,
            taken: data.physicalDamageTaken,
            toChampions: data.physicalDamageDealtToChampions
        };
        this.trueDamage = {
            dealt: data.trueDamageDealt,
            taken: data.trueDamageTaken,
            toChampions: data.trueDamageDealtToChampions
        };
        this.remake = data.gameEndedInEarlySurrender;
        this.surrender = data.gameEndedInSurrender;
        this.goldEarned = data.goldEarned;
        this.goldSpent = data.goldSpent;
        this.position = {
            individual: data.individualPosition,
            team: data.teamPosition
        };
        this.turrets = {
            killed: data.turretKills,
            takenDown: data.turretTakedowns,
            lost: data.turretsLost
        };
        this.inhibitors = {
            killed: data.inhibitorKills,
            takenDown: data.inhibitorTakedowns,
            lost: data.inhibitorsLost
        };
        this.nexusKilled = data.nexusKills > 0;
        this.nexusLost = data.nexusLost > 0;
        this.nexusTakedown = data.nexusTakedowns > 0;
        this.items = new collection_1.Collection();
        this.items.set(1, items.get(data.item0.toString()));
        this.items.set(2, items.get(data.item1.toString()));
        this.items.set(3, items.get(data.item2.toString()));
        this.items.set(4, items.get(data.item3.toString()));
        this.items.set(5, items.get(data.item4.toString()));
        this.items.set(6, items.get(data.item5.toString()));
        this.items.set(7, items.get(data.item6.toString()));
        this.itemsPurchased = data.itemsPurchased;
        this.killingSprees = data.killingSprees;
        this.largestKillingSpree = data.largestKillingSpree;
        this.largestMultiKill = data.largestMultiKill;
        this.longestTimeSpentLiving = data.longestTimeSpentLiving;
        this.largestCriticalStrike = data.largestCriticalStrike;
        this.jungleCampsKilled = data.neutralMinionsKilled;
        this.minionsKilled = data.totalMinionsKilled;
        this.creepScore = data.neutralMinionsKilled + data.totalMinionsKilled;
        this.objectivesStolen = data.objectivesStolen;
        this.objectivesStolenAssists = data.objectivesStolenAssists;
        this.baronKills = data.baronKills;
        this.dragonKills = data.dragonKills;
        this.summoner = {
            id: data.summonerId,
            name: data.summonerName,
            profileIconId: data.profileIcon,
            playerId: data.puuid,
            summonerLevel: data.summonerLevel
        };
        this.summonerSpells = new collection_1.Collection();
        this.summonerSpellsCasts = new collection_1.Collection();
        this.summonerSpells.set('D', summonerSpells.find((spell) => spell.key === data.summoner1Id));
        this.summonerSpells.set('F', summonerSpells.find((spell) => spell.key === data.summoner2Id));
        this.summonerSpellsCasts.set('D', data.summoner1Casts);
        this.summonerSpellsCasts.set('F', data.summoner2Casts);
        this.crowdControlScore = data.timeCCingOthers;
        this.crowdControlTime = data.totalTimeCCDealt;
        this.timePlayed = data.timePlayed;
        this.timeAlive = data.timePlayed - data.totalTimeSpentDead;
        this.timeDead = data.totalTimeSpentDead;
        this.healing = {
            total: data.totalHeal,
            onTeam: data.totalHealsOnTeammates,
            units: data.totalUnitsHealed
        };
    }
}
exports.Participant = Participant;
//# sourceMappingURL=Participant.js.map