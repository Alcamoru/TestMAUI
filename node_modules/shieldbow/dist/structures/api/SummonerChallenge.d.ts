import type { CategoryName, ChallengeCategoryData, ChallengePreferencesData, ChallengeProgressionData, SummonerChallengeData, TierType, TotalChallengePointsData } from '../../types';
import { Collection } from '@discordjs/collection';
import type { Client } from '../../client';
import type { Challenge } from './Challenge';
/**
 * A representation of the overview of a summoner's challenge data.
 */
export declare class TotalChallengePoints {
    /**
     * The tier this summoner has reached in challenges.
     */
    readonly tier: TierType;
    /**
     * The current progression of this summoner in challenges.
     */
    readonly current: number;
    /**
     * The maximum progression of this summoner in challenges.
     */
    readonly max: number;
    /**
     * The percentile of this summoner in challenges. (0-100 %)
     */
    readonly percentile: number;
    constructor(data: TotalChallengePointsData);
}
/**
 * A representation of a summoner's challenge category data.
 */
export declare class ChallengeCategory {
    /**
     * The name of this challenge category.
     */
    readonly name: string;
    /**
     * The tier this summoner has reached in this challenge category.
     */
    readonly tier: TierType;
    /**
     * The current progression of this summoner in this challenge category.
     */
    readonly current: number;
    /**
     * The maximum progression of this summoner in this challenge category.
     */
    readonly max: number;
    /**
     * The percentile of this summoner in this challenge category. (0-100 %)
     */
    readonly percentile: number;
    constructor(name: CategoryName, data: ChallengeCategoryData);
}
/**
 * A representation of a summoner's challenge progression data.
 */
export declare class ChallengeProgression {
    /**
     * The ID of this challenge.
     */
    readonly id: number;
    /**
     * The percentile of this summoner in this challenge. (0-100 %)
     */
    readonly percentile: number;
    /**
     * The tier this summoner has reached in this challenge.
     */
    readonly tier: TierType;
    /**
     * The current progression of this summoner in this challenge.
     */
    readonly value: number;
    /**
     * The timestamp of when this challenge tier was achieved by the summoner.
     */
    readonly achievedTimestamp: number;
    constructor(data: ChallengeProgressionData);
    /**
     * The time of when this challenge was achieved.
     */
    get achievedAt(): Date;
}
/**
 * A representation of a summoner's challenge preferences data.
 */
export declare class ChallengePreferences {
    /**
     * The banner accent of this summoner.
     */
    readonly bannerAccent: string;
    /**
     * The title of this summoner.
     */
    readonly title: string;
    /**
     * The IDs of the challenges this summoner has put on display.
     */
    readonly displayedChallengeIds: number[];
    /**
     * Type of the border the summoner has currently selected.
     */
    readonly crestBorder: 'level' | 'ranked';
    /**
     * The level at which summoner unlocked currently equipped level border.
     */
    readonly prestigeCrestBorderLevel: number;
    /**
     * The client that instantiated this challenge preferences.
     */
    private readonly client;
    constructor(client: Client, data: ChallengePreferencesData);
    /**
     * The challenges that this summoner has put on display.
     */
    fetchDisplayedChallenges(): Promise<Challenge[]>;
}
/**
 * A representation of a summoner's challenge data.
 */
export declare class SummonerChallenge {
    /**
     * The overview of this summoner in challenges.
     */
    totalPoints: TotalChallengePoints;
    /**
     * The challenge categories overview of this summoner.
     */
    categoryPoints: Collection<CategoryName, ChallengeCategory>;
    /**
     * Individual challenge progression stats of this summoner.
     */
    challenges: Collection<number, ChallengeProgression>;
    /**
     * The preferences of this summoner.
     */
    preferences: ChallengePreferences;
    constructor(client: Client, data: SummonerChallengeData);
}
//# sourceMappingURL=SummonerChallenge.d.ts.map