"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Summoner = void 0;
const managers_1 = require("../../managers");
/**
 * A representation of a summoner (player).
 */
class Summoner {
    /**
     * Creates a new summoner instance.
     * @param client - The client that requested this data.
     * @param summoner - The raw summoner data from the API.
     * @param region - The region this summoner is located in.
     */
    constructor(client, summoner, region) {
        /**
         * The summoner ID for this summoner.
         */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The account ID for this summoner.
         */
        Object.defineProperty(this, "accountId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The unique player ID for this summoner.
         * This is also called the PUUID.
         */
        Object.defineProperty(this, "playerId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The summoner name for this summoner.
         */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The summoner level of this summoner.
         */
        Object.defineProperty(this, "level", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The last time this summoner was modified.
         */
        Object.defineProperty(this, "revisionDate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The current profile icon of this summoner.
         */
        Object.defineProperty(this, "profileIcon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A manager for the summoner's champion mastery.
         */
        Object.defineProperty(this, "championMastery", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The region this summoner is located in.
         */
        Object.defineProperty(this, "region", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.client = client;
        this.region = region || client.region;
        this.id = summoner.id;
        this.accountId = summoner.accountId;
        this.playerId = summoner.puuid;
        this.name = summoner.name;
        this.level = summoner.summonerLevel;
        this.revisionDate = new Date(summoner.revisionDate);
        this.profileIcon = `${client.cdnBase}${client.version}/img/profileicon/${summoner.profileIconId}.png`;
        this.championMastery = new managers_1.ChampionMasteryManager(client, this);
    }
    /**
     * Fetch the summoner's RIOT account info.
     *
     * @param options - The basic fetching options.
     */
    fetchAccount(options) {
        if (options)
            options.region = this.region;
        else
            options = { region: this.region };
        return this.client.accounts.fetch(this.playerId, options);
    }
    /**
     * Fetch the summoner's competitive placement info.
     *
     * @param options - The basic fetching options.
     */
    fetchLeagueEntries(options) {
        if (options)
            options.region = this.region;
        else
            options = { region: this.region };
        return this.client.leagues.fetch(this.id, options);
    }
    /**
     * Fetch the summoner's live game data.
     *
     * @param options - The basic fetching options.
     */
    fetchLiveMatch(options) {
        if (options)
            options.region = this.region;
        else
            options = { region: this.region };
        return this.client.spectator.fetch(this.id, options);
    }
    /**
     * Fetch the summoner's recent matches (always fetches from API).
     *
     * @param options - The match list filtering options.
     */
    fetchMatchList(options) {
        options = options || { count: 20 };
        options.count = options.count ?? 20;
        return this.client.matches.fetchMatchListByPlayer(this, options);
    }
    /**
     * Fetch the summoner's clash entries.
     *
     * @param options - The basic fetching options.
     */
    fetchClashEntries(options) {
        if (options)
            options.region = this.region;
        else
            options = { region: this.region };
        return this.client.clash.fetchPlayer(this.id, options);
    }
    /**
     * Fetch the summoner's challenges progression.
     *
     * @param options - The basic fetching options.
     */
    fetchChallenges(options) {
        if (options)
            options.region = this.region;
        else
            options = { region: this.region };
        return this.client.challenges.fetchSummonerProgression(this.playerId, options);
    }
}
exports.Summoner = Summoner;
//# sourceMappingURL=Summoner.js.map