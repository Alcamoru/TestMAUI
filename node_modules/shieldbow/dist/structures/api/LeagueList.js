"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LeagueList = void 0;
const collection_1 = require("@discordjs/collection");
const LeagueEntry_1 = require("./LeagueEntry");
/**
 * A representation of a list of league entries.
 */
class LeagueList {
    /**
     * Creates a new League List instance.
     * @param client - The client requesting the data.
     * @param data - The raw league list data from the API.
     */
    constructor(client, data) {
        /**
         * The competitive league ID.
         */
        Object.defineProperty(this, "leagueId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The tier of the entries in this list.
         */
        Object.defineProperty(this, "tier", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The name for the league of the entries in this list.
         */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The type of queue - such as RANKED_SOLO_5x5, RANKED_FLEX_SR, RANKED_FLEX_TT.
         */
        Object.defineProperty(this, "queue", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The list of entries of the league ID.
         *
         * These are mapped by the summoner name.
         */
        Object.defineProperty(this, "entries", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.leagueId = data.leagueId;
        this.tier = data.tier;
        this.name = data.name;
        this.queue = data.queue;
        this.entries = new collection_1.Collection();
        for (const entry of data.entries) {
            entry.queueType = this.queue;
            entry.leagueId = this.leagueId;
            entry.tier = this.tier;
            this.entries.set(entry.summonerName, new LeagueEntry_1.LeagueEntry(client, entry));
        }
    }
}
exports.LeagueList = LeagueList;
//# sourceMappingURL=LeagueList.js.map