import type { Client } from '../../client';
import type { TournamentPlayerData } from '../../types';
/**
 * A representation of a player in a clash tournament.
 */
export declare class TournamentPlayer {
    /**
     * The ID of the team this player is on.
     */
    readonly teamId: string;
    /**
     * The summoner ID of this player.
     */
    readonly summonerId: string;
    /**
     * The role this player will be performing in the team - CAPTAIN or MEMBER.
     */
    readonly role: 'CAPTAIN' | 'MEMBER';
    /**
     * The position this player will be playing in the team.
     */
    readonly position: 'UNSELECTED' | 'FILL' | 'TOP' | 'JUNGLE' | 'MIDDLE' | 'BOTTOM' | 'UTILITY';
    private readonly client;
    /**
     * Creates a new tournament player instance.
     * @param client - The client that requested this data.
     * @param teamId - The ID of the team this player is on.
     * @param data - The raw player data from the API.
     */
    constructor(client: Client, teamId: string, data: TournamentPlayerData);
    /**
     * Use {@link SummonerManager.fetch} to fetch the summoner for this player.
     */
    get summoner(): Promise<import("./Summoner").Summoner>;
}
//# sourceMappingURL=TournamentPlayer.d.ts.map