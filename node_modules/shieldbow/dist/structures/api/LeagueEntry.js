"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LeagueEntry = void 0;
/**
 * A representation of a summoner's competitive details.
 */
class LeagueEntry {
    /**
     * Create a new League Entry instance.
     * @param client - The client requesting the data.
     * @param data - The raw league entry data from the API.
     */
    constructor(client, data) {
        /**
         * The ID of the summoner this data belongs to.
         */
        Object.defineProperty(this, "summonerId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The name of the summoner this data belongs to.
         */
        Object.defineProperty(this, "summonerName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The league ID.
         */
        Object.defineProperty(this, "league", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The type of queue - such as RANKED_SOLO_5x5, RANKED_FLEX_SR or RANKED_FLEX_TT.
         */
        Object.defineProperty(this, "queueType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The tier the summoner belongs to - such as BRONZE, GOLD, etc.
         */
        Object.defineProperty(this, "tier", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The division under the tier - From 1 to 4 (I - IV).
         */
        Object.defineProperty(this, "division", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The amount of league points (LP) the summoner has.
         */
        Object.defineProperty(this, "lp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of wins the summoner has in this queue.
         */
        Object.defineProperty(this, "wins", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The number of losses the summoner has in this queue.
         */
        Object.defineProperty(this, "losses", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether the summoner is on a hot streak.
         */
        Object.defineProperty(this, "hotStreak", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether the summoner is a veteran or a pro player.
         */
        Object.defineProperty(this, "veteran", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether the summoner is new to the game.
         */
        Object.defineProperty(this, "freshBlood", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether the summoner has been inactive.
         */
        Object.defineProperty(this, "inactive", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * This only exists if the summoner is in a promotion series.
         */
        Object.defineProperty(this, "promos", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.client = client;
        this.league = data.leagueId;
        this.summonerId = data.summonerId;
        this.summonerName = data.summonerName;
        this.queueType = data.queueType;
        this.tier = data.tier;
        this.division = data.rank;
        this.lp = data.leaguePoints;
        this.wins = data.wins;
        this.losses = data.losses;
        this.hotStreak = data.hotStreak;
        this.veteran = data.veteran;
        this.freshBlood = data.freshBlood;
        this.inactive = data.inactive;
        this.promos = data.miniSeries;
    }
    /**
     * Fetch the summoner this data belongs to.
     *
     * @param options - The basic fetching options.
     */
    fetchSummoner(options) {
        return this.client.summoners.fetch(this.summonerId, options);
    }
}
exports.LeagueEntry = LeagueEntry;
//# sourceMappingURL=LeagueEntry.js.map