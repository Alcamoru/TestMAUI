"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Challenge = void 0;
const collection_1 = require("@discordjs/collection");
/**
 * A class representing the details of a challenge.
 */
class Challenge {
    constructor(client, data, percentiles) {
        /**
         * The ID of the challenge.
         */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The names of the challenge mapped by locale.
         */
        Object.defineProperty(this, "names", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The long descriptions of the challenge mapped by locale.
         */
        Object.defineProperty(this, "descriptions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The short descriptions of the challenge mapped by locale.
         */
        Object.defineProperty(this, "shortDescriptions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The state of the challenge.
         */
        Object.defineProperty(this, "state", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether the challenge has a leaderboard.
         */
        Object.defineProperty(this, "leaderboard", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The thresholds of the challenge mapped by tier.
         */
        Object.defineProperty(this, "thresholds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The percentile of player base that have reached a specific tier (mapped by tier).
         */
        Object.defineProperty(this, "percentiles", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new collection_1.Collection()
        });
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.client = client;
        this.id = data.id;
        this.state = data.state;
        this.leaderboard = data.leaderboard;
        this.names = new collection_1.Collection();
        this.descriptions = new collection_1.Collection();
        this.shortDescriptions = new collection_1.Collection();
        this.thresholds = new collection_1.Collection();
        this.percentiles = new collection_1.Collection();
        for (const locale in data.localizedNames) {
            const key = locale;
            const nameData = data.localizedNames[key];
            this.names.set(key, nameData.name);
            this.descriptions.set(key, nameData.description);
            this.shortDescriptions.set(key, nameData.shortDescription);
        }
        for (const tier in percentiles) {
            const key = tier;
            this.percentiles.set(key, percentiles[key]);
        }
        for (const tier in data.thresholds) {
            const key = tier;
            this.thresholds.set(key, data.thresholds[key]);
        }
    }
    /**
     * The name of the challenge (as per the client's locale).
     */
    get name() {
        return this.names.get(this.client.locale);
    }
    /**
     * The long description of the challenge (as per the client's locale).
     */
    get description() {
        return this.descriptions.get(this.client.locale);
    }
    /**
     * The short description of the challenge (as per the client's locale).
     */
    get shortDescription() {
        return this.shortDescriptions.get(this.client.locale);
    }
}
exports.Challenge = Challenge;
//# sourceMappingURL=Challenge.js.map