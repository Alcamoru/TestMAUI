"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SummonerChallenge = exports.ChallengePreferences = exports.ChallengeProgression = exports.ChallengeCategory = exports.TotalChallengePoints = void 0;
const collection_1 = require("@discordjs/collection");
/**
 * A representation of the overview of a summoner's challenge data.
 */
class TotalChallengePoints {
    constructor(data) {
        /**
         * The tier this summoner has reached in challenges.
         */
        Object.defineProperty(this, "tier", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The current progression of this summoner in challenges.
         */
        Object.defineProperty(this, "current", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The maximum progression of this summoner in challenges.
         */
        Object.defineProperty(this, "max", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The percentile of this summoner in challenges. (0-100 %)
         */
        Object.defineProperty(this, "percentile", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.tier = data.level;
        this.current = data.current;
        this.max = data.max;
        this.percentile = data.percentile * 100;
    }
}
exports.TotalChallengePoints = TotalChallengePoints;
/**
 * A representation of a summoner's challenge category data.
 */
class ChallengeCategory {
    constructor(name, data) {
        /**
         * The name of this challenge category.
         */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The tier this summoner has reached in this challenge category.
         */
        Object.defineProperty(this, "tier", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The current progression of this summoner in this challenge category.
         */
        Object.defineProperty(this, "current", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The maximum progression of this summoner in this challenge category.
         */
        Object.defineProperty(this, "max", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The percentile of this summoner in this challenge category. (0-100 %)
         */
        Object.defineProperty(this, "percentile", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.name = name;
        this.tier = data.level;
        this.current = data.current;
        this.max = data.max;
        this.percentile = data.percentile * 100;
    }
}
exports.ChallengeCategory = ChallengeCategory;
/**
 * A representation of a summoner's challenge progression data.
 */
class ChallengeProgression {
    constructor(data) {
        /**
         * The ID of this challenge.
         */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The percentile of this summoner in this challenge. (0-100 %)
         */
        Object.defineProperty(this, "percentile", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The tier this summoner has reached in this challenge.
         */
        Object.defineProperty(this, "tier", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The current progression of this summoner in this challenge.
         */
        Object.defineProperty(this, "value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The timestamp of when this challenge tier was achieved by the summoner.
         */
        Object.defineProperty(this, "achievedTimestamp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = data.challengeId;
        this.percentile = data.percentile * 100;
        this.tier = data.level;
        this.value = data.value;
        this.achievedTimestamp = data.achievedTime;
    }
    /**
     * The time of when this challenge was achieved.
     */
    get achievedAt() {
        return new Date(this.achievedTimestamp);
    }
}
exports.ChallengeProgression = ChallengeProgression;
/**
 * A representation of a summoner's challenge preferences data.
 */
class ChallengePreferences {
    constructor(client, data) {
        /**
         * The banner accent of this summoner.
         */
        Object.defineProperty(this, "bannerAccent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The title of this summoner.
         */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The IDs of the challenges this summoner has put on display.
         */
        Object.defineProperty(this, "displayedChallengeIds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Type of the border the summoner has currently selected.
         */
        Object.defineProperty(this, "crestBorder", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The level at which summoner unlocked currently equipped level border.
         */
        Object.defineProperty(this, "prestigeCrestBorderLevel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The client that instantiated this challenge preferences.
         */
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.client = client;
        this.bannerAccent = data.bannerAccent;
        this.title = data.title;
        this.displayedChallengeIds = data.challengeIds;
        this.crestBorder = data.crestBorder === '2' ? 'ranked' : 'level';
        this.prestigeCrestBorderLevel = data.prestigeCrestBorderLevel;
    }
    /**
     * The challenges that this summoner has put on display.
     */
    async fetchDisplayedChallenges() {
        const exists = await Promise.all(this.displayedChallengeIds.map((id) => this.client.cache.has(`challenge:${id}`)));
        if (!exists)
            await this.client.challenges.fetchAll();
        return Promise.all(this.displayedChallengeIds.map((id) => this.client.cache.get(`challenge:${id}`)));
    }
}
exports.ChallengePreferences = ChallengePreferences;
/**
 * A representation of a summoner's challenge data.
 */
class SummonerChallenge {
    constructor(client, data) {
        /**
         * The overview of this summoner in challenges.
         */
        Object.defineProperty(this, "totalPoints", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The challenge categories overview of this summoner.
         */
        Object.defineProperty(this, "categoryPoints", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Individual challenge progression stats of this summoner.
         */
        Object.defineProperty(this, "challenges", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The preferences of this summoner.
         */
        Object.defineProperty(this, "preferences", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.totalPoints = new TotalChallengePoints(data.totalPoints);
        this.categoryPoints = new collection_1.Collection();
        this.challenges = new collection_1.Collection();
        this.preferences = new ChallengePreferences(client, data.preferences);
        for (const key in data.categoryPoints) {
            const cName = key;
            this.categoryPoints.set(cName, new ChallengeCategory(cName, data.categoryPoints[cName]));
        }
        data.challenges.map((c) => new ChallengeProgression(c)).forEach((c) => this.challenges.set(c.id, c));
    }
}
exports.SummonerChallenge = SummonerChallenge;
//# sourceMappingURL=SummonerChallenge.js.map